#   -*- mode: org; fill-column: 60 -*-

#+TITLE: Dot Emacs  | Deerpig's Dot Emacs
#+AUTHOR: Brad Collins
#+EMAIL: brad@chenla.la
#+STARTUP: showall
#+TOC: headlines 4
#+PROPERTY: header-args    :results drawer  :tangle emacs-dot.el
:PROPERTIES:
:CUSTOM_ID: 
:Name:      /home/deerpig/proj/deerpig/dot-emacs/dot-emacs.org
:Created:   2017-07-02T17:39@Prek Leap (11.642600N-104.919210W)
:ID:        785b0073-5672-4599-9f07-04895472aaab
:VER:       552264039.438531758
:GEO:       48P-491193-1287029-15
:BXID:      pig:ICY6-7517
:Class:     dotemacs
:Type:      literate-program
:Status:    wip
:Licence:   MIT/CC BY-SA 4.0
:END:

[[https://img.shields.io/badge/made%20by-Deerpig-999999.svg?style=flat-square]] 
[[https://img.shields.io/badge/class-dotemacs-0072B2.svg?style=flat-square]]
[[https://img.shields.io/badge/type-literate%20program-0072B2.svg?style=flat-square]]
[[https://img.shields.io/badge/status-wip-D55E00.svg?style=flat-square]]
[[https://img.shields.io/badge/licence-MIT%2FCC%20BY--SA%204.0-000000.svg?style=flat-square]]

* Introduction

#+begin_quote
"Pray!"

/Recruits/: [chanting] "This is my rifle. There are many others like it,
but this one is mine. My rifle is my best friend. It is my life. I
must master it as I must master my life. Without me, my rifle is
useless. Without my rifle, I am useless. I must fire my rifle true. I
must shoot straighter than my enemy, who is trying to kill me. I must
shoot him before he shoots me. I will. Before God I swear this creed:
my rifle and myself are defenders of my country, we are the masters of
our enemy, we are the saviors of my life. So be it, until there is no
enemy, but peace. Amen."

-- Rifleman's Creed
   Full Metal Jacket | 1987
   [[https://www.youtube.com/watch?v=Hgd2F2QNfEE][Rifleman's Creed]]  | YouTube

Now write some elisp code that replaces 

  - "rifle"        with "emacs"
  - "God"          with "Root"
  - "fire"         with "execute"
  - "shoot"        with "code"
  - "country"      with "open source software"
  - "our enemy"    with "this universe, the wind of time is flowing
                         relative to me, it's all a figment of my mind"
  - "shoot him"    with "commit my code first so"
  - "he shoots me" with "others can work on more interesting problems"
  - "peace"        with "Microsoft and Oracle"
  - the Emacs Hacker's Creed

#+end_quote

The quotes from /Full Metal Jacket/ are only half in jest.  The
recruits are trained with M1 Carbines.  These are single shot
(they have a magazine? so what do you call them) rifles.  They are
bog standard rifles  -- learn the basics, then use M-16s in the field.

The M1 is bog standard emacs, start with that, learn that, master
that.  Learn to pull it apart, and put it back together again with
your eyes closed.  Teach your fingers to do things the same as you
touch type -- without thinking, committing the basics to muscle memory.

Why? because there will be countless times when you use emacs without
all the fancy-ass customizations you've made.  When you are ssh'd into
a remote computer, when you are logged in as root on a computer you
forgot to put your init on, when you've done something dumb and
screwed up your init file and you are dropped back into vanilla emacs
with a white background with the splash screen and menus and the ugly
tool bar until you can debug whatever you screwed up before you can
get back your evil-mode key-bindings and the illusion that you are
using /spacemacs/ instead of a heavily pre-tweaked emacs that emulates
Vim.  You should be as fluid in standard emacs as you are in your
custom environment.  You don't need a mouse, or menus or scrollbars or
even font-locking (colours).  A master customizes his tools and work
environment to suit her workflow, but can work just as well without
them.  All you need is emacs.

What I did was force myself to use emacs in a shell on a remote
computer for the first month.  No mouse, no fancy init -- everything
out of the box until I understood better what I was doing.  You end up
customizing stuff within a day or so, but nothing crazy.

   then

Come back here and look at what I've got -- this is the M-16 version,
it's higher powered, but it can be finicky and unreliable unless you
know what you're doing.  (yeah yeah I know, I'm beginning to streach this
metaphor a bit thin).

You /can/ use the M16 first, but you will be better off if you master
the M1 before you take on the high powered stuff.


#+begin_quote
This is my rifle!
This is my gun!

This is for fighting!
This is for fun!

-- Full Metal Jacket | 1987
   [[https://www.youtube.com/watch?v=4kU0XCVey_U][This Is My Rifle. This Is My Gun]] | YouTube
#+end_quote


* Header

#+begin_src emacs-lisp
;; Deerpig's Crufty .emacs
;; This dot emacs is a poor example 

#+end_src

* Xemacs

Ah XEmacs (previously known as Lucid Emacs).  Many of you reading this
may not have even heard of the great emacs fork that resulted in
XEmacs.  But XEmacs was very popular in its day and was known for
being more innovative and responsive to users needs and with a faster
release cycle than the glacial-bordering-on-tectonic release pace that
emacs was stuck in between 1987 and 1993 when Emacs 19 was finally
released and Emacs began its comeback.

When I started using Emacs, XEmacs was still at the top of their game,
but it still smelled like a fork to me... I tried Gnu Emacs and never
looked back.

XEmacs is now all but extinct (it's last release was in 2009), with
all development now having shifted back into Gnu Emac, but I
keep this snippet here in remembrance of things past.

For the curious:

  - [[https://en.wikipedia.org/wiki/XEmacs][XEmacs]] | Wikipedia
  - [[http://www.xemacs.org/][XEmacs: The next generation of Emacs]] 

#+begin_src emacs-lisp

;; I don't use XEmacs ======================================  
;; This file does not work with XEmacs.
(when (featurep 'xemacs)
  (error "This .emacs file does not work with XEmacs."))

#+end_src

* The Bare Minimum

Set the basic settings that drive you crazy in vanilla emacs out of
the box.  These settings are for newbies, but even after a few days of
using emacs you should set:

  - no splash screen
  - no scratch buffer message
  - no tool bar
  - no menu bar
  - no scroll bar
  - answer yes and now questions with y and n
  - no tabs
  - no tabs! (in case you didn't hear me the first time)
  - no ring/bell/beep

And finally, enable flashing parenthesis, which is very helpful when
you are trying to debug a broken init file on startup....

#+begin_src emacs-lisp

  ;; THE BARE MINIMUM ========================================

  ;; first lets get rid of the gui crutches for newbies

  ;; no tool bar
  (tool-bar-mode 0)

  ;; no menu bar
  (menu-bar-mode 0)

  ;; no scroll bar
  (scroll-bar-mode -1)

  ;; Disable the silly ring
  (setq ring-bell-function '(lambda()))

  ;; The follwing settings constitute a minimum .emacs file for using
  ;; emacs on remote servers.

  ;; no scratch message
  (setq initial-scratch-message nil)

  ;; get rid of yes-or-no questions - y or n is enough
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; No, please, no tabs in my programs!
  (setq indent-tabs-mode nil)

  ;; I kinda know my emacs
  (setq inhibit-startup-message t)

  ;; flash matching parenthesis
  (require 'flash-paren)
  (flash-paren-mode 1)

  ;; remove the strange white line between two fringes.
  (set-face-attribute 'vertical-border nil :foreground (face-attribute 'fringe :background))

#+end_src

That feels better already.

* Emacs Server

#+begin_src emacs-lisp
;; Start the emacs-client ==================================
(server-start)

;; emacsclient stuff to automatically open new frame and close and
;; clean everything up after you've finished

(add-hook 'server-switch-hook
	  (lambda nil
	    (let ((server-buf (current-buffer)))
	      (bury-buffer)
	      (switch-to-buffer-other-frame server-buf))))

(add-hook 'server-done-hook 'delete-frame)
(add-hook 'server-done-hook (lambda nil (kill-buffer nil)))

#+end_src

* External Paths

#+begin_src emacs-lisp

;; External path search ====================================

(add-to-list 'load-path "~/emacs-lisp")
(add-to-list 'load-path "~/emacs-lisp/emacs-wiki-deerpig")
(add-to-list 'load-path "~/emacs-lisp/burr")
(add-to-list 'load-path "~/emacs-lisp/burs")

#+end_src

* Default Encoding & Language

UTF-8 could now be the default preference in emacs, but it can't hurt
to make sure.

I also explicitly set the language to english.  This may not be
needed, but since I've lived in Asia for the last 30 years, I found it
wise not to make assumptions about language settings.

#+begin_src emacs-lisp

;; Prefer UTF-8 over Latin-1 ===============================

(set-language-environment 'english)
(set-default-coding-systems 'utf-8)
(prefer-coding-system 'utf-8)

#+end_src

* Frames Windows & Buffers

Display the visited file's path in the frame title.  If you have
multiple windows, the path of the file in the window that is focused
will be displayed.

#+begin_src emacs-lisp

;; Display path in frame title =============================
 (setq frame-title-format
       '((:eval (if (buffer-file-name)
		    (abbreviate-file-name (buffer-file-name))
		  "%b"))))
#+end_src


* Default Font

#+begin_src emacs-lisp

;; set the default font ====================================

(set-default-font "Deja Vu Sans Mono-12")
 ;;(set-fontset-font (frame-parameter nil 'font)
 ;;   'han '("cwTeXHeiBold" . "unicode-bmp"))
#+end_src

* Package & Melpa

#+begin_src emacs-lisp

;; Package Manager & Repositories ==========================
(eval-when-compile
  (require 'package))
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/"))

(package-initialize)
#+end_src

* Use Package



#+begin_src emacs-lisp

;; Use-package =============================================

(unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))

#+end_src

* Customizations

Emacs has a bit of an annoying habit of adding things to your init
file without telling you.  This becomes a problem when you keep your
init file in version control and then use the init file for multiple
machines.  Most of the time this is an inconvienence because you are
having to commit things that emacs has added, not you.  But it also
can be a pain-in-the-ass when it causes commit conflicts.

So keep customize stuff in it's own file and then add that file to git
ignore.

#+begin_src emacs-lisp

;; Customizations ==========================================
;; keep all emacs customizations in file that is not
;; part of the repo.
(setq custom-file "~/.emacs-custom")
(load custom-file 'noerror)

#+end_src

* Private & Secrets

Like in customize, we need to keep things like passwords and API keys
out of the main init file which is in a public github repo.

This turned out to be a bit tricky.  The following sources helped, and
clues to getting it to finally word were found on StackExchange.

  - [[https://www.gnu.org/software/emacs/manual/html_node/auth/Help-for-users.html#Help-for-users][Emacs auth-source Library 0.3: Help for users]]
  - [[https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources][Keeping Secrets in Emacs with GnuPG and Auth Sources]] | Mastering Emacs
  - [[http://emacs.stackexchange.com/questions/12660/peculiar-error-triggered-when-calling-erc-org2blog-from-windows-os-x][Peculiar Error triggered when calling ERC, org2blog]]  | Emacs Stack Exchange
  - [[http://emacs.stackexchange.com/questions/10207/how-to-get-org2blog-to-use-authinfo-gpg][org mode - How to get org2blog to use .authinfo.gpg]]  | Emacs Stack Exchange

The next step will be to encrypt .authinfo....


#+begin_src emacs-lisp

(setq auth-source-debug t)

(use-package auth-source
  :config
  (setq
   auth-sources '(
                  ;; default
                  ;; "secrets:session"
                  ;; "secrets:Login"
                  "~/.authinfo"
                  )
   epa-file-cache-passphrase-for-symmetric-encryption t
   ;; need the following to avoid dbus compiling error
   auth-source-debug 'trivia
   ))


#+end_src

#+RESULTS:
:RESULTS:
t
:END:



* Load Init Files

At the moment we are still loading tangled files.

#+begin_src emacs-lisp

;; Load literate Org files =================================

(load "~/.emacs-user-info")
(load "~/.emacs-helm")
(load "~/.emacs-dired")
(load "~/.emacs-org")
(load "~/.emacs-mu4e")
(load "~/.emacs-packages")
(load "~/.emacs-hydra")
(load "~/.emacs-irc")
(load "~/.emacs-misc")
(load "~/.emacs-lisp")
(load "~/.emacs-sort")
#+end_src


* Browsers
** Default Browser

Not long ago I was using Conkeror which was build on top of firefox
and all was good for a while and then it wasn't.  Development stopped
and bitrot began to creep in.  So I moved over to Iceweasel (Debian's
rebranding of firefox) with the /Firemacs/ plug-in to provide emacs
key-bindings.  Not as good as Conkeror but useable.  And now recently
Debian and Mozilla found a way to play nice with each other again and
Debian is moving back to Firefox, which they now bundle as firefox-esr
which I now use with the /KeySnail/ plugin.  KeySnail is pretty damn
good and has brought back almost all of the goodness that had been
lost when Conkeror had been left for dead in a ditch on the side of
the road.

On the horizon is WebKit-GTK support from /within/ emacs.  There are
so many people drooling over the prospect of being able to do
graphical browsing /inside/ emacs that it is threatening to become a
public health concern.  I would be surprised if this support becomes
useable for another year at least.  So until then firefox and keysnail
will do nicely.

#+begin_src emacs-lisp

;; Set the Default Browser =================================
;;
;; use firefox as default browser
;; (setq browse-url-browser-function 'browse-url-firefox)

(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "firefox")

#+end_src


** Browse Url Applications

Open *EVERYTHING* in firefox.

with attitide....

#+begin_src emacs-lisp
(defvar browse-url-firefox-program 'firefox)
(defvar browse-url-kde-program 'firefox)
(defvar browse-url-gnome-moz-program 'firefox)
(defvar browse-url-mozilla-program 'firefox)
(defvar browse-url-galeon-program 'firefox)
(defvar browse-url-netscape-program 'firefox)
(defvar browse-url-mosaic-program 'firefox)
(defvar browse-url-xterm-program 'firefox)

#+end_src

** Browse Apropos 

At the moment I don't have any of these bound to any keys, I've been
using helm's surfraw integration.

But I'm not giving up -- I may yet find a way of working it into my
workflow.

#+begin_src emacs-lisp

;; Browse Apropos URL ======================================

(require 'browse-apropos-url)
(provide 'browse-url)
(require 'thingatpt+)

;; Choose commands that mirror DuckDuckGo !bang commands when
;; possible.  !bang should go to search on a site.  !!bangbang should
;; just be a shortcut to a url.  If it's not a search link, default
;; both single and double bang prefix to home page.

(setq apropos-url-alist
      '( ;; DuckDuckGo is default search engine.
	("^\??:? +\\(.*\\)" .       ;; "?" defaults to DuckDuckGo
	 "http://duckduckgo.com/?q=\\1")
	("^!ddg?:? +\\(.*\\)" .     ;; DuckDuckGo Search
	 "http://duckduckgo.com/?q=\\1")
        ("^!!ddg"                   ;; DuckDuckGo Home Page
	 "http://duckduckgo.com")
	("^!bang$" .                ;; DuckDuckGo !bang Page
	 "http://duckduckgo.com/bang.html")
        ;; Google Sites ;;;;;;;;;;;;;;;;;;;;;;
	("^gw?:? +\\(.*\\)" .
         "http://www.google.com/search?q=\\1")
	("^!g?:? +\\(.*\\)" . 	    ;; Google Web Search
	 "http://www.google.com/search?q=\\1")
        ("^!!g$" . 	            ;; Google Home Page
	 "http://google.com/")
        ("^!reader?:? +\\(.*\\)" .  ;; Search Google Reader
         "http://www.google.com/reader/view/#search/\\1")
        ("^!!reader$" .             ;; Google Reader Home
         "http://reader.google.com/")
        ("^!!voice$" .              ;; Google Voice
         "http://voice.google.com/")
	("^!!gmail$" .              ;; GMail
	 "http://mail.google.com/")
	("^!gi:? +\\(.*\\)" .       ;; Google Images
	 "http://images.google.com/images?sa=N&tab=wi&q=\\1")
	("^!!gi$" .                 ;; Google Images
	 "http://images.google.com/")
	("^!gg:? +\\(.*\\)" .       ;; Google Groups
	 "http://groups.google.com/groups?q=\\1")
        ("^!gn:? +\\(.*\\)" .       ;; Google News Search
         "http://news.google.com/news?sa=N&tab=dn&q=\\1")
        ("^!!gn$" .                 ;; Google News Home
         "http://news.google.com/")
	;;Blekko ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ("^!blekko?:? +\\(.*\\)" .  ;; Blekko Search
	 "http://blekko.com/ws/+\\1")
	("^!!blekko$" .             ;; Blekko Home
	 "http://blekko.com/")
        ;; Tech News ;;;;;;;;;;;;;;;;;;;;;;;;;;
	("^!/\.$" . ;; Slashdot Home
         "http://www.slashdot.org")
	("^!!/\.$" . ;; Slashdot Home
         "http://www.slashdot.org")
        ("^!bb$" . ;; Boing Boing Home
         "http://boingboing.net")
        ("^!!bb$" . ;; Boing Boing Home
         "http://boingboing.net")
        ;; Emacs ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	("^!emacs:? +\\(.*\\)" . ;; Emacs Wiki Search
         "http://www.emacswiki.org/cgi-bin/wiki?search=\\1")
        ("^!!emacs$" . ;; Emacs Wiki Home
         "http://www.emacswiki.org")
        ;;Hacker News ;;;;;;;;;;;;;;;;;;;;;;;;
	("^!hn:? +\\(.*\\)" . ;; Hacker News Search
	"http://www.hnsearch.com/search#request/all&q=\\1")
	("^!!hn$" . ;; Hacker News Home
	"http://news.ycombinator.com")
	;;Torrent Search ;;;;;;;;;;;;;;;;;;;;
	("^!tpb:? +\\(.*\\)" . ;;The Pirate Bay
	"http://thepiratebay.com/search/\\1")
	("^!demon:? +\\(.*\\)" . ;; Demonoid Search
	"https://www.demonoid.me/files/?query=\\1" )
	("^!demonoid:? +\\(.*\\)" . ;; Demonoid Search
	"https://www.demonoid.me/files/?query=\\1" )
	("^!isohunt:? +\\(.*\\)" . ;;ISOHunt
	"https://isohunt.com/torrents/?ihq=\\1" )
	("^!cheggit:? +\\(.*\\)" . ;;Cheggit Search
	"http://cheggit.net/browsetorrents.php?filter=all%3A%5B\\1" )
	("^!!cheggit:? +\\(.*\\)" . ;;Cheggit Home
	"http://cheggit.net/browsetorrents.php" )
	("^!jpop:? +\\(.*\\)" . ;; JPopSuki Artist Search
	"http://jpopsuki.eu/torrents.php?action=advanced&artistname=\\1" )
	;; Content Companies ;;;;;;;;;;;;;;;;;
	("^!amazon:? +\\(.*\\)" . ;; Amazon
	"http://www.amazon.com/s/?&field-keywords=\\1" )
	("^!imdb:? +\\(.*\\)" . ;; IMDB
	"http://www.imdb.com/find?s=all&q=\\1" )
        ("^!tmdb:? +\\(.*\\)" . ;; The Movie Database
	"http://www.themoviedb.org/search?search=\\1")
        ;; Add Later

	))

#+end_src





* Emacs Desktop

Desktop provides session management.  I've had most of these setting
in place since.... well, forever.

See:

  - [[https://www.emacswiki.org/emacs?action=browse;oldid=DeskTop;id=Desktop][Desktop]] | EmacsWiki

#+begin_src emacs-lisp

;; Emacs Desktop ===========================================
;; save a list of open files in ~/.emacs.desktop
;; save the desktop file automatically if it already exists
(setq desktop-save 'if-exists)
(desktop-save-mode 1)

(setq desktop-buffers-not-to-save
(concat "\\("
       "^nn\\.a[0-9]+\\|\\.log\\|(ftp)\\|^tags\\|^TAGS"
       "\\|\\.emacs.*\\|\\.diary\\|\\.newsrc-dribble\\|\\.bbdb"
       "\\)$"))

(add-to-list 'desktop-modes-not-to-save 'dired-mode)
(add-to-list 'desktop-modes-not-to-save 'Info-mode)
(add-to-list 'desktop-modes-not-to-save 'info-lookup-mode)
(add-to-list 'desktop-modes-not-to-save 'fundamental-mode)
(add-to-list 'desktop-modes-not-to-save 'magit-mode)
;; should add twittering, eirc, elfeed?


;; save a bunch of variables to the desktop file
;; for lists specify the len of the maximal saved data also
(setq desktop-globals-to-save		
      (append '((extended-command-history . 30)
                (file-name-history        . 100)
                (grep-history             . 30)
                (compile-history          . 30)
                (minibuffer-history       . 50)
                (query-replace-history    . 60)
                (read-expression-history  . 60)
                (regexp-history           . 60)
                (regexp-search-ring       . 20)
                (search-ring              . 20)
                (shell-command-history    . 50)
                tags-file-name
                register-alist)))

;; Save/Read the desktop
(desktop-load-default)
(desktop-read)

#+end_src

* Calendar & Diary

** Misc Settings

#+begin_src emacs-lisp
;; Calendar Style
(setq european-calendar-style t)

;; work-around for error message:
;;  void-function fancy-diary-display
(setq diary-display-function 'diary-fancy-display)

#+end_src

* Info

#+begin_src emacs-lisp
;; Regexp Info Manual ======================================
(require 'info)
(setq Info-default-directory-list 
      (cons "~/emacs-lisp/regexp-info" Info-default-directory-list))

(setq Info-default-directory-list 
      (cons "~/emacs-lisp/burs" Info-default-directory-list))


;; Elisp tutorial and manual ===============================
(require 'info)
(setq Info-default-directory-list 
      (cons "/usr/local/info" Info-default-directory-list))

(setq Info-default-directory-list 
     (cons "~/emacs-lisp/docs" Info-default-directory-list))



#+end_src
