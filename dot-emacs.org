#+TITLE:Dot Emacs: Helm Settings
#+AUTHOR: Brad Collins
#+EMAIL: brad@chenla.la
#+PROPERTY: header-args    :results drawer  :tangle emacs-helm.el

* Introduction

#+begin_quote
"Pray!"

/Recruits/: [chanting] "This is my rifle. There are many others like it,
but this one is mine. My rifle is my best friend. It is my life. I
must master it as I must master my life. Without me, my rifle is
useless. Without my rifle, I am useless. I must fire my rifle true. I
must shoot straighter than my enemy, who is trying to kill me. I must
shoot him before he shoots me. I will. Before God I swear this creed:
my rifle and myself are defenders of my country, we are the masters of
our enemy, we are the saviors of my life. So be it, until there is no
enemy, but peace. Amen."

-- Rifleman's Creed
   Full Metal Jacket | 1987
   [[https://www.youtube.com/watch?v=Hgd2F2QNfEE][Rifleman's Creed]]  | YouTube

Now write some elisp code that replaces 

  - "rifle"        with "emacs"
  - "God"          with "Root"
  - "fire"         with "execute"
  - "shoot"        with "code"
  - "country"      with "open source software"
  - "our enemy"    with "this universe, the wind of time is flowing
                         relative to me, it's all a figment of my mind"
  - "shoot him"    with "commit my code first so"
  - "he shoots me" with "others can work on more interesting problems"
  - "peace"        with "Microsoft and Oracle"
  - the Emacs Hacker's Creed

#+end_quote

The quotes from /Full Metal Jacket/ are only half in jest.  The
recruits are trained with M1 Carbines.  These are single shot
(they have a magazine? so what do you call them) rifles.  They are
bog standard rifles  -- learn the basics, then use M-16s in the field.

The M1 is bog standard emacs, start with that, learn that, master
that.  Learn to pull it apart, and put it back together again with
your eyes closed.  Teach your fingers to do things the same as you
touch type -- without thinking, committing the basics to muscle memory.

Why? because there will be countless times when you use emacs without
all the fancy-ass customizations you've made.  When you are ssh'd into
a remote computer, when you are logged in as root on a computer you
forgot to put your init on, when you've done something dumb and
screwed up your init file and you are dropped back into vanilla emacs
with a white background with the splash screen and menus and the ugly
tool bar until you can debug whatever you screwed up before you can
get back your evil-mode key-bindings and the illusion that you are
using /spacemacs/ instead of a heavily pre-tweaked emacs that emulates
Vim.  You should be as fluid in standard emacs as you are in your
custom environment.  You don't need a mouse, or menus or scrollbars or
even font-locking (colours).  A master customizes his tools and work
environment to suit her workflow, but can work just as well without
them.  All you need is emacs.

What I did was force myself to use emacs in a shell on a remote
computer for the first month.  No mouse, no fancy init -- everything
out of the box until I understood better what I was doing.  You end up
customizing stuff within a day or so, but nothing crazy.

   then

Come back here and look at what I've got -- this is the M-16 version,
it's higher powered, but it can be finicky and unreliable unless you
know what you're doing.  (yeah yeah I know, I'm beginning to streach this
metaphor a bit thin).

You /can/ use the M16 first, but you will be better off if you master
the M1 before you take on the high powered stuff.


#+begin_quote
This is my rifle!
This is my gun!

This is for fighting!
This is for fun!

-- Full Metal Jacket | 1987
   [[https://www.youtube.com/watch?v=4kU0XCVey_U][This Is My Rifle. This Is My Gun]] | YouTube
#+end_quote



* Customizations

Emacs has a bit of an annoying habit of adding things to your init
file without telling you.  This becomes a problem when you keep your
init file in version control and then use the init file for multiple
machines.  Most of the time this is an inconvienence because you are
having to commit things that emacs has added, not you.  But it also
can be a pain-in-the-ass when it causes commit conflicts.

So keep customize stuff in it's own file and then add that file to git
ignore.

#+begin_src emacs-lisp

;; Customizations ==========================================
;; keep all emacs customizations in file that is not
;; part of the repo.
(setq custom-file "~/.emacs-custom")
(load custom-file 'noerror)

#+end_src

* Private

Like in customize, we need to keep things like passwords and API keys
out of the main init file which is in a public github repo.

The solution is to encrypt the file using gpg.
