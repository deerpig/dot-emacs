#+TITLE:Dot Emacs: Dired
#+AUTHOR: Brad Collins
#+EMAIL: brad@chenla.la
#+PROPERTY: header-args    :results drawer  :tangle emacs-dired.el

* Introduction

** Header

#+begin_src emacs-lisp
;;  DIRED ==================================================

#+end_src

** Dired+

#+begin_src emacs-lisp

;; Dired+ ==================================================
(require 'dired+)

#+end_src

** Dired-x

#+begin_src emacs-lisp

;; Dired-x =================================================
(require 'dired-x)

(add-hook 'dired-load-hook 
          (function (lambda ()
                      (load "dired-x")
                      ;; Set dired-x variables here.  For example:
                      ;; (setq dired-guess-shell-gnutar "gtar")
                      (setq dired-omit-files-p t)
                      ;; (setq dired-x-hands-off-my-keys nil)
                      )))

#+end_src

* --------------------------

#+begin_src emacs-lisp



(setq diredp-hide-details-initially-flag nil)

;; Omit uninteresting files in dired
;; use M-o (toggle-omit-files) to show dot, and other files

;;(setq-default dired-omit-files-p nil) ; this is buffer-local variable

;;(setq dired-omit-files
;;       (concat dired-omit-files "\\|^\\..+$"))

;; Dired Details
;; (require 'dired-details)
;; (dired-details-install)

(global-set-key "\C-c\C-b" 'browse-url-of-dired-file)

(setq dired-recursive-deletes 'top)

;; Default for `ls switches' in Dired C-u s
;; Must contain `l'.  Hide group, owner, and make file sizes
;; human readable.  Adding an `a' will show hidden dot-files.

(setq dired-listing-switches "-la")

(add-hook 'dired-mode-hook
	  (lambda ()
	    ;; Set dired-x buffer-local variables here.  For example:
	    ;; (dired-omit-mode 1)
	    ))

(defun make-parent-directory ()
  "Make sure the directory of `buffer-file-name' exists."
  (make-directory (file-name-directory buffer-file-name) t))

(add-hook 'find-file-not-found-functions #'make-parent-directory)


;;; Autoload `dired-jump' and `dired-jump-other-window'.
;;; We autoload from FILE dired.el.  This will then load dired-x.el
;;; and hence define `dired-jump' and `dired-jump-other-window'.
(define-key global-map "\C-x\C-j" 'dired-jump)
(define-key global-map "\C-x4\C-j" 'dired-jump-other-window)

(autoload (quote dired-jump) "dired" "\
     Jump to Dired buffer corresponding to current buffer.
     If in a file, Dired the current directory and move to file's line.
     If in Dired already, pop up a level and goto old directory's line.
     In case the proper Dired file line cannot be found, refresh the Dired
     buffer and try again." t nil)

(autoload (quote dired-jump-other-window) "dired" "\
     Like \\[dired-jump] (dired-jump) but in other window." t nil)


;; list directories first in dired

(defun sof/dired-sort ()
  "Dired sort hook to list directories first."
  (save-excursion
   (let (buffer-read-only)
     (forward-line 2) ;; beyond dir. header  
     (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max))))
  (and (featurep 'xemacs)
       (fboundp 'dired-insert-set-properties)
       (dired-insert-set-properties (point-min) (point-max)))
  (set-buffer-modified-p nil))

 (add-hook 'dired-after-readin-hook 'sof/dired-sort)

;;; Dired Sort menu
(add-hook 'dired-load-hook
           (lambda () (require 'dired-sort-menu)))

;; set scroll so that it scrolls the page one line at a time
(setq scroll-step 1)

;; Hide uninteresting files including dot files
;; M-o toggles between hidden and all files

(random t)



#+end_src

** Guess Shell Command 

I had forgotten about this command.  In Dired, apply shell command to
marked files by pressing =!=.  This is a nice way of opening media
files in an external application from inside Dired.

  - [[https://masteringemacs.org/article/dired-shell-commands-find-xargs-replacement][Dired Shell Commands: The find & xargs replacement]] | Mastering Emacs]]

#+begin_src emacs-lisp

;; Guess Shell Command by file extension ===================

;;guess shell command by file extension.
(setq dired-guess-shell-alist-user
      '(("\\.pdf\\'"    "evince")
  	    ("\\.ps\\'"     "evince")
	    ("\\.djvu\\'"   "djview")
	    ("\\.mobi\\'"   "fbreader")
	    ("\\.epub\\'"   "fbreader")
	    ("\\.gif\\'"    "evince")
	    ("\\.jpg\\'"    "viewnior")
	    ("\\.jpeg\\'"   "viewnior")
	    ("\\.png\\'"    "viewnior")
	    ("\\.tif\\'"    "viewnior")
	    ("\\.tiff\\'"   "viewnior")))

#+end_src

** Dired Single

#+begin_quote
;;;; Commentary: 
;;
;; This package provides a way to reuse the current dired buffer to
;; visit another directory (rather than creating a new buffer for the
;; new directory).  Optionally, it allows the user to specify a name
;; that all such buffers will have, regardless of the directory they
;; point to.

-- dired-single.el
#+end_quote

I've had this installed forever and I'm still not sure how much it
helps keep the number of Dired buffers down....

#+begin_src emacs-lisp
;; Dired Single ============================================

(require 'dired-single)

(defun my-dired-init ()
  "Bunch of stuff to run for dired, either immediately or when it's
  loaded."
  ;; <add other stuff here>
  (define-key dired-mode-map [return] 'joc-dired-single-buffer)
  (define-key dired-mode-map [mouse-1] 'joc-dired-single-buffer-mouse)
  (define-key dired-mode-map "^"
    (function
       (lambda nil (interactive) (joc-dired-single-buffer "..")))))

(defun start-singledired()
  (progn
    (require 'dired-single)
    (if (boundp 'dired-mode-map)
        (my-dired-init)
      ;; it's not loaded yet, so add our bindings to the load-hook
      (add-hook 'dired-load-hook 'my-dired-init))))

#+end_src

** Dired Peep

Preview files in Dired.  This was commented out.  Can't remember why,
so for now not tangled.

#+begin_src emacs-lisp :tangle no
;; Dired Peep ==============================================
;;preview files in dired

(use-package peep-dired
   :ensure t
   :defer t ; don't access `dired-mode-map' until `peep-dired' is loaded
   :bind (:map dired-mode-map
               ("P" . peep-dired)))

#+end_src
