#   -*- mode: org; fill-column: 60 -*-

#+TITLE: Orgmode  | Deerpig's Dot Emacs
#+AUTHOR: Brad Collins
#+EMAIL: brad@chenla.la
#+STARTUP: showall
#+TOC: headlines 4
#+PROPERTY: header-args :results silent  :tangle emacs-org.el
:PROPERTIES:
:CUSTOM_ID: 
:Name:      /home/deerpig/proj/deerpig/dot-emacs/dot-org.org
:Created:   2017-07-02T18:05@Prek Leap (11.642600N-104.919210W)
:ID:        ae1f7f9c-7ba3-4578-b8cf-d5dfaa437f53
:VER:       552265605.209064064
:GEO:       48P-491193-1287029-15
:BXID:      pig:VWU6-4004
:Class:     dotemacs
:Type:      literate-program
:Status:    wip
:Licence:   MIT/CC BY-SA 4.0
:END:

[[https://img.shields.io/badge/made%20by-Deerpig-999999.svg?style=flat-square]] 
[[https://img.shields.io/badge/class-dotemacs-0072B2.svg?style=flat-square]]
[[https://img.shields.io/badge/type-literate%20program-0072B2.svg?style=flat-square]]
[[https://img.shields.io/badge/status-wip-D55E00.svg?style=flat-square]]
[[https://img.shields.io/badge/licence-MIT%2FCC%20BY--SA%204.0-000000.svg?style=flat-square]]

* Introduction

I try to keep all org mode related stuff here.  But org is
now so entwined with so many things in emacs that sometimes
it's difficult to know if it's an org package or, a dired,
or mu4e or whatever file that is provides some org
interoperability.

* Org Mode

** Org Plus Contrib

I'm adding org-elpa here until I finalize moving from the old 
.emacs file.

Org Plus has all of the contrib packages that were found in the
contrib directory when installing org by hand.

#+begin_src emacs-lisp

(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(use-package org-plus-contrib 
  :ensure t)

#+end_src

** File Header

#+begin_src emacs-lisp :results none
;; -*- mode: EMACS-LISP; fill-column: 75; comment-column: 50; -*-
;; Emacs Org Mode Configuration

#+end_src

** Load Orgmode

At present we're running a local copy of Org, we will move over to the
MELPA version soon....

Set location for org-mode:

#+begin_src emacs-lisp
(add-to-list 'load-path "~/emacs-lisp/org-mode/lisp")
(add-to-list 'load-path "~/emacs-lisp/org-mode/contrib/lisp" t)

#+end_src

Load org mode

#+begin_src emacs-lisp
(require 'org)
#+end_src
** Enable Modules

We need to go through this list and weed out unused or obsolete
modules.

#+begin_src emacs-lisp
(setq org-modules 
       (quote (org-bbdb org-bibtex org-crypt org-gnus org-id org-info org-bullets org-habit org-inlinetask org-irc org-mew org-mhe org-protocol org-rmail org-vm org-wl org-w3m)))

#+end_src


** Babel Language Evaluation

#+begin_src emacs-lisp
;; Enable language evulation in Org Babel

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (ditaa .t)
   (dot . t)
   (R . t)
   (shell . t)
   (python . t)
   (ruby . t)
   (lisp  . t)
   (scheme . t)
   (calc . t)
   (plantuml . t)
   ))

(setq org-confirm-babel-evaluate nil)

(add-to-list 'org-src-lang-modes (quote ("dot" . graphviz-dot)))

#+end_src

** LaTex Syntax Higlighting

- [[http://pragmaticemacs.com/emacs/highlight-latex-text-in-org-mode/][Highlight latex text in org mode]] | Pragmatic Emacs

#+begin_src emacs-lisp
;;; Highlight LaTex code in org files ----------------------

(setq org-highlight-latex-and-related '(latex))
#+end_src


** Org Bullets

Use Org Bullets with some funky unicode bullets:

Change the default bullet list and ellipsis. See:

   - [[https://www.miskatonic.org/2017/01/09/recent-emacs-changes/][Recent Emacs changes]] | Miskatonic University Press]]
   - [[http://endlessparentheses.com/changing-the-org-mode-ellipsis.html][Changing the org-mode ellipsis]] | Endless Parentheses

#+begin_example
    (setq org-bullets-bullet-list '("◉" "○ ""►" "•" "•"))
    (setq org-bullets-bullet-list '("⊢" "⋮" "⦚" "⦙" "⦀")) ;; ⦚ ⦀ ⦙ ⋱ 
    (setq org-ellipsis " ⤵") ;; ⤵ ↴ ⬎ ⤷
#+end_example

#+begin_src emacs-lisp
;; Org Bullets ---------------------------------------------

(use-package org-bullets
   :ensure t
   :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

    ;; Change bullet list
    ;; https://www.miskatonic.org/2017/01/09/recent-emacs-changes/
    ;; (setq org-bullets-bullet-list '("◉" "○ ""►" "•" "•"))
    (setq org-bullets-bullet-list '("⊢" "⋮" "⦚" "⦙" "⦀")) ;; ⦚ ⦀ ⦙ ⋱ 

    ;; Change the ellipsis that indicates hidden content
    ;; http://endlessparentheses.com/changing-the-org-mode-ellipsis.html
    (set-face-attribute 'org-ellipsis nil :underline nil)
    ;; ⤵ ↴ ⬎ ⤷
    (setq org-ellipsis " ⤵"))
#+end_src

** Key Bindings

#+begin_src emacs-lisp
(define-key global-map "\M-\C-r" 'org-capture)
(define-key global-map "\C-ca" 'org-agenda)

#+end_src

** Open Agenda Other Window

#+begin_src emacs-lisp

;; Open Agenda in Other Window -----------------------------
;; Options:
;;    reorganize-frame   :: show two windows in current frame
;;    current-window     :: use existing window
;;    only-window        :: delete other windows
;;    other-frame        :: open in other frame
(setq org-agenda-window-setup 'other-window)

#+end_src

** Org Speed Commands

#+begin_src emacs-lisp
;; Org Speed Commands --------------------------------------
(setq org-use-speed-commands t)
(setq org-speed-commands-user (quote (("S" . widen))))

#+end_src

** Helm Org

#+begin_src emacs-lisp
;; Helm Org ------------------------------------------------
(require 'helm-org)

;;(define-key global-map "" 'helm-org-agenda-files-headings)
;;(define-key helm-map (kbd "C-c C-t") 'helm-org-agenda-files-headings)
;;(define-key map (kbd "t")  'helm-org-agenda-files-headings)

#+end_src

** Store Links

This is not only useful in Org, I use this in mu4e buffers as well.

#+begin_src emacs-lisp
;; Store a link to window or heading at point
;; Can then be inserted using C-c M-l
(global-set-key "\C-c\M-s" 'org-store-link)

#+end_src

** Timestamps

#+begin_src emacs-lisp
;; Toggle active/inactive timestamps
(global-set-key "\C-c\C-x=" 'org-toggle-timestamp-type)

#+end_src

** Human Readable Timestamp

Used in burr/org headers.

#+begin_src emacs-lisp
(setq human-readable-stamp (concat "@" user-work-location-name
	      " (" user-work-latitude
	      "-" user-work-longitude ")"))
#+end_src

** Set Directories

#+begin_src emacs-lisp
(setq org-directory "~/org"
      org-default-notes-file "~/org/refile.org"
      org-agenda-diary-file  "~/org/diary.org")

#+end_src

** Misc Settings

Set a bunch of variables:

#+begin_src emacs-lisp
(setq org-agenda-include-diary t
      org-enforce-todo-dependencies t
      org-cycle-separator-lines 0
      org-use-fast-todo-selection t
      org-treat-S-cursor-todo-selection-as-state-change nil
      org-startup-indented t
      ;; Show all future entries for repeating tasks
      org-agenda-repeating-timestamp-show-all nil
      ;; Show all agenda dates - even if they are empty
      org-agenda-show-all-dates nil
      ;; Start the weekly agenda on Monday
      org-agenda-start-on-weekday 1
      ;; Show one week in weekly agenda view
      org-agenda-span 8
      org-deadline-warning-days 30
      org-src-fontify-natively 't
      ;; Display tags farther right
      org-agenda-tags-column -102)

#+end_src

** Org Weather

#+begin_src emacs-lisp

  ;; org-weather ===============================================
  ;; not on MELPA so we install the old fashioned way...
  ;; :home: https://github.com/kautsig/org-weather
  ;; :data: http://openweathermap.org/

  (add-to-list 'load-path "~/.emacs.d/org-weather")
  (require 'org-weather)
  ;; Set your location and refresh the data
  (setq org-weather-location "Phnom Penh, Cambodia"
	org-weather-api-key  "50bd25ab290db6c323c58439a8e6f41f"
	org-weather-format "天氣: %desc, %tmin-%tmax%tu, %h%hu")
  (org-weather-refresh)

#+end_src

** Function: Narrow/Widen Subtree

Not sure if I'm using this or now -- I can't recall using the
keybindings in some time -- I never can remember anything in emacs
using the Function Keys.

Commenting out for now....

#+begin_src emacs-lisp :tangle no
;; Narrow to subtree & widen
;;(global-set-key (kbd "<f5>") 'bh/org-todo)

;;(defun bh/org-todo ()
;;  (interactive)
;;  (org-narrow-to-subtree)
;;  (org-show-todo-tree nil))

;;(global-set-key (kbd "<S-f5>") 'bh/widen)

;;(defun bh/widen ()
;;  (interactive)
;;  (widen)
  ;;(org-reveal)
;;  )

#+end_src

** Refile Targets

If you include 'org-agenda-files' it will pull up refile
targets from your org-agenda refile file list.  I used this
for a while but it was too messy.  I've gone back to
specifically listing all files I want to use as targets.


#+begin_src emacs-lisp
;; Refile Targets ------------------------------------------
;;; Use agenda files as primary refile targets

(defun deerpig/org-buffer-files ()
  "Return list of opened orgmode buffer files"
  (mapcar (function buffer-file-name)
	  (org-buffer-list 'files)))

(setq org-refile-targets
'(
("~/org/notes.org"   :maxlevel . 1)
("~/org/quotes.org"  :maxlevel . 1)
("~/org/todo.org"    :maxlevel . 1)
("~/org/pnca.org"    :maxlevel . 1)
("~/org/repozit.org" :maxlevel . 1)
("~/org/chenla.org"  :maxlevel . 1)
("~/org/farm.org"    :maxlevel . 1)
("~/org/blog.org"    :maxlevel . 1)
;;(deerpig/org-buffer-files :maxlevel . 1)
;;(org-agenda-files . (:maxlevel . 1))
))

;; Set this if you want to use helm to choose refile-targets
(setq org-outline-path-complete-in-steps nil)
(setq org-completion-use-ido nil)

#+end_src

** Org-mode in message buffers

This sounded like a good idea, but in practice is got in the way more
than it helped.

Commented out.

#+begin_src emacs-lisp :tangle no
;; enable org-mode in message buffers
;; (setq message-mode-hook
;;       (quote (orgstruct++-mode
;;               (lambda nil (setq fill-column 72))
;;               turn-on-auto-fill
;;               bbdb-define-all-aliases)))

#+end_src

** Habits


#+begin_src emacs-lisp
;; Enable habit tracking (and a bunch of other modules)

(require 'org-habit)
(setq org-habit-show-habits-only-for-today t)
(setq org-habit-show-all-today t)
; global STYLE property values for completion
(setq org-global-properties (quote (("STYLE_ALL" . "habit"))))
; position the habit graph on the agenda to the right of the default
(setq org-habit-graph-column 50)

#+end_src

** Display Images

#+begin_src emacs-lisp

;; Display images in org mode ------------------------------

(iimage-mode)
;;add the org file link format to the iimage mode regex
(add-to-list 'iimage-mode-image-regex-alist
 (cons (concat "\\[\\[file:\\(~?" iimage-mode-image-filename-regex "\\)\\]")  1))
;; add a hook so we can display images on load
(add-hook 'org-mode-hook '(lambda () (org-turn-on-iimage-in-org)))

;;function to setup images for display on load
(defun org-turn-on-iimage-in-org ()
  "display images in your org file"
  (interactive)
  (turn-on-iimage-mode)
  (set-face-underline-p 'org-link nil))

;;function to toggle images in a org bugger
(defun org-toggle-iimage-in-org ()
  "display images in your org file"
  (interactive)
  (if (face-underline-p 'org-link)
      (set-face-underline-p 'org-link nil)
      (set-face-underline-p 'org-link t))
  (call-interactively 'iimage-mode))

#+end_src

** Org Tag List

#+begin_src emacs-lisp
(setq org-tag-alist (quote (
			    ("@errand" . ?e)
			    ("@blog"   . ?b)
			    ("@work"   . ?w)
			    ("@home"   . ?h)
                        ("@farm"   . ?f)
                        ("@campus" . ?c)
			    ("@road"   . ?r)
			    ("@call"   . ?c)
			    ("@email"  . ?m)
			      )))
#+end_src

** Org Easy Templates

There is a bug in org-reveal that only allows upper case NOTES.  make
Notes upper case until there is a fix.

#+begin_src emacs-lisp

;; Easy Templates ==========================================

(add-to-list 'org-structure-template-alist '("n" "#+BEGIN_NOTES\n?\n#+END_NOTES"))
(add-to-list 'org-structure-template-alist '("C" "#+begin_comment\n?\n#+end_comment"))
#+end_src

** Ignore Heading

Use the tag :ignore: on a heading and org will export the content of a
subheading but not export the title!  Very cool!

#+begin_src emacs-lisp
;; use the tag :ignore: on a heading and org will export the content
;; of a subheading but not export the title!  Very cool!

(require 'ox-extra)
(ox-extras-activate '(ignore-headlines))

#+end_src

** Single Tags

Allow setting single tags without the menu

#+begin_src emacs-lisp
  ; Allow setting single tags without the menu
  (setq org-fast-tag-selection-single-key (quote expert))
    
  ; For tag searches ignore tasks with scheduled and deadline dates
  (setq org-agenda-tags-todo-honor-ignore-options t)

#+end_src


** Markdown export

#+begin_src emacs-lisp
(require 'ox-md)
#+end_src

** EPUB export

#+begin_src emacs-lisp
  ;; (use-package ox-epub
  ;;   :ensure t
  ;;   :config
  ;; )
#+end_src


** Todo Keywords, Faces & Triggers

Set Keywords:

#+begin_src emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(x)" "|" "WORK(w)" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING" "DELEGATED")
	      (sequence "NOTES(n)" "QUOTE(q)" "EMAIL" "LINK")
	      )))

#+end_src

Set Faces for keywords:

#+begin_src emacs-lisp
(setq org-todo-keyword-faces
      '(("TODO"      :foreground "red"          :weight bold)
        ("NEXT"      :foreground "blue"         :weight bold) 
        ("DONE"      :foreground "green"        :weight bold)
	("NOTES"     . shadow)
	("DRAFT"     :foreground "purple"       :weight bold)
	("CANCELLED" :foreground "OrangeRed"    :weight bold)
	("MEETING"   :foreground "spring green" :weight bold)
	("PHONE"     :foreground "spring green" :weight bold)
	("DELEGATED" :foreground "spring green" :weight bold)
        ("QUOTE"     :foreground "yellow"       :weight bold)
        ("WORK"      :foreground "gold"         :weight bold)
	("LINK"      :foreground "tan2"         :weight bold)
       ;; ("EMAIL"     :foreground "maroon"       :weight bold)
	))

#+end_src

Triggers:

#+begin_src emacs-lisp
(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("ARCHIVE" . t))
              ;;("DONE"      ("ARCHIVE" . t))
             	     )))

;; (setq org-todo-state-tags-triggers
;;       (quote (("CANCELLED" ("CANCELLED" . t))
;;               ("WAITING" ("WAITING" . t))
;;               ("HOLD" ("WAITING") ("HOLD" . t))
;;               (done ("WAITING") ("HOLD") ("DELEGATED"))
;;               ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
;;               ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
;;               ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

#+end_src

** Org Capture

#+begin_src emacs-lisp  :results silent  ;; results create nested drawers
;; Org Capture =============================================

;; I use C-c c to start capture mode
(global-set-key (kbd "C-c c") 'org-capture)

;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
;; http://orgmode.org/manual/Template-expansion.html#Template-expansion
(setq org-capture-templates
      (quote (("t" "TODO" entry (file "~/org/refile.org")
               "* TODO %?\n:PROPERTIES:\n :CREATED: %T\n :ID:      %(org-id-new)\n:REF:      %a\n:END:\n")
              ("n" "Note" entry (file "~/org/refile.org")
               "* NOTES %T %?\n:PROPERTIES:\n:CREATED: %T\n:ID:      %(org-id-new)\n:REF:     %a\n:END:\n")
	          ("q" "Quote" entry (file "~/org/refile.org")
               "* QUOTE \n:PROPERTIES:\n :CREATED: %T\n :ID:      %(org-id-new)\n:END:\n\n#+begin_quote\n%?\n#+end_quote")
              ("j" "Journal" entry (file+datetree "~/org/diary.org")
               "* %?\n:PROPERTIES:\n :CREATED: %T\n :ID:      %(org-id-new)\n:END:\n")
              ("m" "Meeting" entry (file "~/org/refile.org")
               "* MEETING with %?\n:PROPERTIES:\n :CREATED: %T\n :ID:      %(org-id-new)\n:END:\n")
             ;;("p" "Phone call" entry (file "~/org/refile.org")
             ;;  "* PHONE %?\n:PROPERTIES:\n :CREATED: %T\n :ID:      %(org-id-new)\n:END:\n")
              ("p" "Protocol" entry (file+headline "~/org/refile.org")
               "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
              ("e" "Email" entry (file "~/org/refile.org")
               "* EMAIL %?\n:PROPERTIES:\n :CREATED: %T\n :ID:      %(org-id-new)\n:END:\n:url: %a\n") 
	          ("H" "Habit" entry (file "~/org/habits.org")
	           "** NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n")
              ("h" "Hoard" entry (file "~/proj/chenla/hoard/refile.org")
               "* BURR %?\n")
	         ;;("L" "Protocol Link" entry (file+headline  "~/org/refile.org")
             ;; "* %? [[%:link][%:description]] \nCaptured On: %U")
              ("l" "Link" entry (file "~/org/refile.org") ;; insert org link
	           "* LINK %? %^C %^g \n:PROPERTIES:\n :CREATED: %T\n :ID:      %(org-id-new)\n:END:\n")
	          ("b" "BibTex" plain (file "~/org/ref.bib")
               "\n\n\n\n%?")
	          ("c" "Contacts" entry (file "~/org/contacts.org")
	           "* %?%:fromname\n:PROPERTIES:\n:ID:        %(org-id-new)\n:CREATED:   %T\n:NAME:      %:fromname\n:EMAIL:     %:fromaddress\n:PHONE:    \n:ALIAS:    \n:NICKNAME: \n:IGNORE:   \n:ICON:     \n:NOTE:     \n:ADDRESS:  \n:BIRTHDAY: \n:END:\n")
              ("B" "Chenla Blog" entry (file "~/org/blog.org")
               "** TODO %?\n%T\n"))))

             ;; ("p" "Phone call" entry (file "~/org/refile.org")
             ;;  "* PHONE %?\n:PROPERTIES:\n :CREATED: %T\n :ID:      %(org-id-new)\n:END:\n")
             ;;("l" "Link" entry (file "~/org/refile.org") ;; insert org link
	         ;; "* LINK %? %^C %^g \n:PROPERTIES:\n :CREATED: %T\n :ID:      %(org-id-new)\n:END:\n")


;;       ("B" "Blog Post" plain (file (capture-blog-post-file)) (file "tlp-blog-post.org"))
;;	      ("c" "Contacts" entry (file "~/org/contacts.org")
;;	       "* %(org-contacts-template-name)\n:PROPERTIES:\n:ID:        %(org-id-new)\n:CREATED:   %T\n:NAME:    %\1 %\1\n:EMAIL: %(org-contacts-template-email)\n:PHONE:    \n:ALIAS:    \n:NICKNAME: \n:IGNORE:   \n:ICON:     \n:NOTE:     \n:ADDRESS:  \n:BIRTHDAY: \n:END:\n")

#+end_src



- [[https://www.superloopy.io/articles/2017/blogging-with-org-mode.html][Blogging with Org mode]] | Superloopy

#+begin_src emacs-lisp
  ;;; Capture Blog Post --------------------------------------

  ;; (defun capture-blog-post-file ()
  ;;   (let* ((title (read-string "Post Title: "))
  ;;          (slug (replace-regexp-in-string "[^a-z]+" "-" (downcase title))))
  ;;     (expand-file-name
  ;;      (format "~/proj/sites/chenla.org/_posts/%s-%s.org"
  ;;              (format-time-string "%Y-%m-%d" (current-time))
  ;;              slug))))

#+end_src

** Open Capture in Other Frame

This has become a /very/ important part of my workflow.  I can now
open a capture window using =<win>-r= outside of emacs.  This is very
useful when adding references and contacts.  I've found that I am
using capture far more than I did when it opened in an existing frame,
though I still do that as well when I am in emacs.

See:

 - [[http://cestlaz.github.io/posts/using-emacs-24-capture-2/#.WKPa_NUxVpg][Org Capture 2]] | C'est la Z
 - [[https://github.com/nicferrier/emacs-noflet][nicferrier/emacs-noflet]] | github

#+begin_src emacs-lisp
;; Open Capture In Other Frame -----------------------------
;; In Openbox rc.xml bind:
;;    emacsclient -ne "(make-capture-frame)"
;; to W-r
;; 
;; See: http://cestlaz.github.io/posts/using-emacs-24-capture-2/

(defadvice org-capture-finalize 
    (after delete-capture-frame activate)  
  "Advise capture-finalize to close the frame"  
  (if (equal "capture" (frame-parameter nil 'name))  
    (delete-frame)))

(defadvice org-capture-destroy 
    (after delete-capture-frame activate)  
  "Advise capture-destroy to close the frame"  
  (if (equal "capture" (frame-parameter nil 'name))  
    (delete-frame)))

(use-package noflet
  :ensure t)

(defun make-capture-frame ()
  "Create a new frame and run org-capture."
  (interactive)
  (make-frame '((name . "capture")))
  (select-frame-by-name "capture")
  (delete-other-windows)
  (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
    (org-capture)))

#+end_src

** Org Contacts

Change to use-package?

#+begin_src emacs-lisp

;; Org Contacts ============================================

(require 'org-contacts)

#+end_src

** Open Agenda in Other Window

For years I opened agenda in a separate frame.  But when using a large
screen it's easier to work with if agenda opens in the frame on the left.

#+begin_src emacs-lisp
;; open agenda in other window
;; Options:
;;    reorganize-frame   :: show two windows in current frame
;;    current-window     :: use existing window
;;    only-window        :: delete other windows
;;    other-frame        :: open in other frame
(setq org-agenda-window-setup 'other-window)

#+end_src

** BibTex Mode

Why is this in the emacs-org file?

#+begin_src emacs-lisp

;; BibTex Mode Stuff ---------------------------------------

(setq bibtex-autokey-year-length 4)

#+end_src

** Org Abbreviations

This is very useful.  But I will have to revisit how I use them as we
start integrating BMF topicspaces into the config.

These are set globally, but they can be set for single files and
headings and headings as well.

#+begin_src emacs-lisp
;; Org Abbreviations ---------------------------------------

  (setq org-link-abbrev-alist
       '(("bug"  . "http://bugs.chenla.org/support/issue")
         ("gh"   . "https://github.com/")
         ;;("wiki" . "http://en.wikipedia.org/wiki/")
         ("rfc"  . "http://tools.ietf.org/html/")))

#+end_src

** Insert Epoch

This function will be used for setting version numbers in BMF.

#+begin_src emacs-lisp
(defun insert-epoch ()
  "Insert time in seconds from the J2000.0 epoch in
   sec.microseconds, by subtracting unix-time"
  (interactive)
  (insert (epoch-J2000)))


(defun epoch-J2000 ()
  "Get time in seconds from the J2000.0 epoch in
   sec.microseconds, by subtracting seconds unix-time
   until year 2000"
  (replace-regexp-in-string "\n\\'" "" 
			    (concat 
			     (number-to-string 
			      (round (- (string-to-number
					 (shell-command-to-string "date +%s")) 946727935)))
			     (shell-command-to-string "date +.%N"))))
#+end_src


** Jekyll Projects

This section needs to be broken up and better documented.

#+begin_src emacs-lisp
;; Jekyll Projects =========================================

(setq deerpig-publish-blog-dir "")
(setq chenla-publish-blog-dir  "~/proj/sites/chenla.org/")


(setq org-html-htmlize-output-type 'css)


;; unset for localization
;;(setq org-jekyll-lang-subdirs '(("en" . "en/")))
;;(setq org-jekyll-lang-subdirs '(("kh" . "kh/")))

(require 'ox-publish)
(setq org-publish-project-alist
      (quote (("chenla-html"
	       :base-directory "~/proj/sites/chenla.org/"
	       :base-extension "org"
	       :publishing-directory  ,chenla-publish-blog-dir
	       :recursive t
	       :publishing-function org-html-publish-to-html
	       :headline-levels 4
           :table-of-contents nil
	       :html-extension "html")
       
	      ("chenla-static"
	       :base-directory "~/proj/sites/chenla.org/"
	       :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|svg"
	       :publishing-directory ,chenla-publish-blog-dir
	       :recursive t
	       :publishing-function org-publish-attachment)
       
	      ("chenla" :components ("chenla-html" "chenla-static"))


	      ("core-docs"
	       :base-directory "~/proj/chenla/core-docs/"
	       :base-extension "org"
	       :publishing-directory "~/proj/chenla/core-html/"
	       :recursive t
	       :publishing-function org-html-publish-to-html
	       :headline-levels 4
	       :html-extension "html")

	      
	      ("core-static"
	       :base-directory "~/proj/chenla/core-docs/"
	       :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|svg"
	       :publishing-directory "~/proj/chenla/core-html/"
	       :recursive t
	       :publishing-function org-publish-attachment)
       
	      ("core" :components ("core-docs" "core-static"))
	      )))

;; Deploy projects -----------------------------------------

(defun deploy (name)
  "Build and deploy local websites using shell script to call
   orgmode and git.  Scripts are kept in ~/.dotfiles/ and
   linked to ~/bin/"
  (interactive "cdeploy: (c)ore (l)a (d)eerpig")
  (shell-command     (cond ((equal name ?c) "cored")
			   ((equal name ?l) "betad")
			   ((equal name ?d) "deerd"))))

;; delete 2 blank spaces at top of files
;; when publishing

;; (add-hook 'org-publish-after-export-hook
;; 	  '(lambda nil
;; 	     (goto-char (point-min))
;; 	     (while (re-search-forward "^\n\n---" nil t)
;; 	       (replace-match "---"))
;;   ))

#+end_src

** Org-octopress

[[https://github.com/yoshinari-nomura/org-octopress][ - GitHub - yoshinari-nomura/org-octopress: org-mode in octopress]]

Required by org-subtree which uses ox-jekyll.el

#+begin_src emacs-lisp
(use-package org-octopress
  :ensure t)
#+end_src


** Export Subtree

Code from:

  - [[https://github.com/Malabarba/ox-jekyll-subtree/blob/master/ox-jekyll-subtree.el][Malabarba/ox-jekyll-subtree]] | GitHub

#+begin_src emacs-lisp
;; Export for Jekyll subtrees ------------------------------


(load-file "~/.emacs.d/ox-jekyll-subtree.el")
;;(load-file "~/emacs-lisp/ox-jekyll.el")
(autoload 'endless/export-to-blog "jekyll-once")
(setq org-jekyll-use-src-plugin t)

(defun deerpig/set-blog-var ()
  "pull values for #+BLOGDIR and #+BASEURL and replace settings for 
   endless/blog-dir and endless/blog-base-url so that we can use 
   ox-jekyll-subtree for multiple blogs...."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (search-forward "#+BLOGDIR:")
    (forward-char 1)
    (setq endless/blog-dir
	  (buffer-substring-no-properties (point) (line-end-position)))
    (goto-char (point-min)) 
    (search-forward "#+BASEURL:")
    (forward-char 1)
    (setq endless/blog-base-url
	  (buffer-substring-no-properties (point) (line-end-position)))

    ))

;; Obviously, these two need to be changed for your blog.
(setq endless/blog-base-url "http://chenla.org/")
(setq endless/blog-dir (expand-file-name "~/proj/sites/chenla.org/"))
#+end_src

** Whitespace

Haven't used this in a while -- perhaps it should be put into a hydra?

#+begin_src emacs-lisp
(defun whack-whitespace (arg)
      "Delete all white space from point to the next word.  With prefix ARG
    delete across newlines as well.  The only danger in this is that you
    don't have to actually be at the end of a word to make it work.  It
    skips over to the next whitespace and then whacks it all to the next
    word."
      (interactive "P")
      (let ((regexp (if arg "[ \t\n]+" "[ \t]+")))
        (re-search-forward regexp nil t)
        (replace-match "" nil nil)))

#+end_src

** Org Man Page

Does this work?

#+begin_src emacs-lisp
;; add man page url -----------------------------------------
(provide 'org-man)

#+end_src

** Org Word Count

While this is very cool, my mode line has far too much crap in it.
When I want to see a word count it's easy enough to run =wc= by hand.

Commented out.

#+begin_src emacs-lisp :tangle no

;; org word count ------------------------------------------

;;(add-hook 'org-mode-hook 'wc-mode)

#+end_src

** Org MIME

This code converts org markup into proper mime multipart
messages. This can be called in an org buffer or in a message buffer.

See:

  [[http://kitchingroup.cheme.cmu.edu/blog/2016/10/29/Sending-html-emails-from-org-mode-with-org-mime/][Sending html emails from org-mode with org-mime]]

------- put in code -----------


#+begin_src emacs-lisp :tangle no
;; org mime -------------------------------------
;; http://kitchingroup.cheme.cmu.edu/blog/2016/10/29/Sending-html-emails-from-org-mode-with-org-mime/
#+end_src

** Org IDs in Links

#+begin_src emacs-lisp  :results none ;; DON'T 
;; Use org-ids in org-links --------------------------------

(setq org-id-track-globally t)
(setq org-id-link-to-org-use-id 'use-existing)
(org-id-update-id-locations) ;; updates id-index

#+end_src

** Function: Recursively Find org files

Recursively find .org files in provided directory.

Snarfed from:

  [[http://stackoverflow.com/questions/11384516/how-to-make-all-org-files-under-a-folder-added-in-agenda-list-automatically/11384907#11384907][How to make all org-files under a folder added in agenda-list automatically?]] Stack Overflow

#+begin_src emacs-lisp :results none
;; recursively find .org files in provided directory
;; modified from an Emacs Lisp Intro example
;;
;; Snarfed From: http://stackoverflow.com/a/11384907

(defun deerpig/find-org-file-recursively (&optional directory filext)
  "Return .org and .org_archive files recursively from DIRECTORY.
If FILEXT is provided, return files with extension FILEXT instead."
  (interactive "DDirectory: ")
  (let* (org-file-list
	 (case-fold-search t)	      ; filesystems are case sensitive
	 (file-name-regex "^[^.#].*") ; exclude dot, autosave, and backup files
	 (filext (or filext "org$\\\|org_archive"))
	 (fileregex (format "%s\\.\\(%s$\\)" file-name-regex filext))
	 (cur-dir-list (directory-files directory t file-name-regex)))
    ;; loop over directory listing
    (dolist (file-or-dir cur-dir-list org-file-list) ; returns org-file-list
      (cond
       ((file-regular-p file-or-dir) ; regular files
	(if (string-match fileregex file-or-dir) ; org files
	    (add-to-list 'org-file-list file-or-dir)))
       ((file-directory-p file-or-dir)
	(dolist (org-file (deerpig/find-org-file-recursively file-or-dir filext)
			  org-file-list) ; add files found to result
	  (add-to-list 'org-file-list org-file)))))))

#+end_src

** Search Extra Files

#+begin_src emacs-lisp

;; (setq org-agenda-text-search-extra-files
;;       '(agenda-archives
;;         "~/org/pinboard.org"
;;         "~/org/subdir/textfile1.txt"))

(setq org-agenda-text-search-extra-files
      (append (deerpig/find-org-file-recursively "~/org/" "org")
              (deerpig/find-org-file-recursively "~/proj/" "org")))


#+end_src


** Function: Add Org-Id to all headings in a file

Snarfed this from:

  [[http://stackoverflow.com/questions/13340616/assign-ids-to-every-entry-in-org-mode][Assign IDs to every entry in Org-mode]] | Stack Overflow

I would eventually like be able to change the heading levels, so that
you can just add ids to level one or level two headings.

#+begin_src emacs-lisp
;; Add Org-ID to Headings in File --------------------------

(defun deerpig/org-add-id-to-headings ()
  "Insert and org-id to all headings in file at point that do not
have an id"
  (interactive)
   (require 'org-id)
   (save-excursion
      (goto-char (point-max))
      (while (outline-previous-heading)
        (org-id-get-create)))
  )

#+end_src

** Org Reveal

Reveal is a powerful HTML presentation framework.  Org Reveal makes it
easy to create Reveal presentations using orgmode.

This is my current favorite tool for making presentations in orgmode
and will become by default method for creating presentations.

  - [[http://cestlaz.github.io/posts/using-emacs-11-reveal/#.WKPOW9UxVpi][Using Reveal.js presentations]] | C'est la Z
  - [[https://scottnesbitt.io/2017/01/24/org-reveal/][Creating slides with Emacs org-mode and Reveal.js]] | Open Source Musings
  - [[https://github.com/hakimel/reveal.js][hakimel/reveal.js]] | Github Home
  - [[http://lab.hakim.se/reveal-js/#/][reveal.js]] | The HTML Presentation Framework
  - [[https://github.com/hakimel/reveal.js/blob/master/css/theme/README.md][reveal.js/README.md]] | Github
  - [[https://github.com/yjwen/org-reveal/wiki/Yasnippet-integration][Yasnippet org-reveal integration]] | Github

#+begin_src emacs-lisp

;; Org Reveal ==============================================
;;

(use-package ox-reveal
  :ensure t
  :config
  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  (setq org-reveal-mathjax t)
  (setq org-reveal-note-key-char t)
 )
;; note that htmlize has already been loaded elsewhere...

#+end_src

** Beamer Presentations

I'm no longer using Beamer, but the code may be of use someday:

#+begin_src emacs-lisp :tangle no
;; allow for export=>beamer by placing
;; #+LaTeX_CLASS: beamer in org files
;; (unless (boundp 'org-export-latex-classes)
;;   (setq org-export-latex-classes nil))
;; (add-to-list 'org-export-latex-classes
;;   ;; beamer class, for presentations
;;   '("beamer"
;;      "\\documentclass[11pt]{beamer}\n
;;       \\mode<{{{beamermode}}}>\n
;;       \\usetheme{{{{beamertheme}}}}\n
;;       \\usecolortheme{{{{beamercolortheme}}}}\n
;;       \\beamertemplateballitem\n
;;       \\setbeameroption{show notes}
;;       \\usepackage[utf8]{inputenc}\n
;;       \\usepackage[T1]{fontenc}\n
;;       \\usepackage{hyperref}\n
;;       \\usepackage{color}
;;       \\usepackage{listings}
;;       \\lstset{numbers=none,language=[ISO]C++,tabsize=4,
;;   frame=single,
;;   basicstyle=\\small,
;;   showspaces=false,showstringspaces=false,
;;   showtabs=false,
;;   keywordstyle=\\color{blue}\\bfseries,
;;   commentstyle=\\color{red},
;;   }\n
;;       \\usepackage{verbatim}\n
;;       \\institute{{{{beamerinstitute}}}}\n          
;;        \\subject{{{{beamersubject}}}}\n"

;;      ("\\section{%s}" . "\\section*{%s}")
     
;;      ("\\begin{frame}[fragile]\\frametitle{%s}"
;;        "\\end{frame}"
;;        "\\begin{frame}[fragile]\\frametitle{%s}"
;;        "\\end{frame}")))

;;   ;; letter class, for formal letters

;;   (add-to-list 'org-export-latex-classes

;;   '("letter"
;;      "\\documentclass[11pt]{letter}\n
;;       \\usepackage[utf8]{inputenc}\n
;;       \\usepackage[T1]{fontenc}\n
;;       \\usepackage{color}"
     
;;      ("\\section{%s}" . "\\section*{%s}")
;;      ("\\subsection{%s}" . "\\subsection*{%s}")
;;      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
;;      ("\\paragraph{%s}" . "\\paragraph*{%s}")
;;      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

#+end_src

** Insert Functions

I'll be going through all of this and moving most into yasnippets or
sunsetting the ones I don't use.

#+begin_src emacs-lisp
;; ================================
;; Insert Fuctions
;; ================================


(defun insert-org ()
  "Insert template header in a org document"
  (interactive)
        (goto-char (point-min))
        (insert "#   -*- mode: org; fill-column: 60 -*-\n")
	(insert "#+TITLE: \n")
	(insert "#+AUTHOR: Brad Collins \\\<brad@chenla.la>\n")
	(insert "#+DATE: \n")
        (insert "#+STARTUP: showall\n")
      ;;(insert "#+FILETAGS: \n")
        (insert "#+INFOJS_OPT: view:info toc:t ltoc:t\n")
        (insert "#+HTML_HEAD_EXTRA: <style>body {margin-left:50px; width:60%;}</style>\n")
      ;;(insert "\n [ [[~/org/index.org][index]] | ]\n\n")
	(insert "  :PROPERTIES:")
        (insert "\n  :Name: ")
        (insert (format "%s" (buffer-file-name)))
        (insert "\n  :Created: ")
        (insert-iso)
        (insert "@")
        (insert user-work-location-name)
        (insert " (")
	(insert user-work-latitude)
	(insert "-")
	(insert user-work-longitude)
	(insert ")")
	(insert "\n  :ID: ")
	(insert (org-id-new))
	(insert "\n  :URL:")
	(insert "\n  :END:\n\n\n"))

(defun insert-latex ()
  "Insert latex header template in a org document at point."
  (interactive)
        (insert "#+OPTIONS: toc:nil H:5 todo:nil tasks:nil timestamp:nil\n")
        (insert "#+OPTIONS: \\n:nil email:nil d:nil skip:nil\n")
        (insert "#+LaTeX_CLASS_OPTIONS: [12pt,A4]\n")
        (insert "#+LaTeX_HEADER: \\usepackage[T1]{fontenc}\n")
        (insert "#+LaTeX_HEADER: \\usepackage{mathpazo}\n")
        (insert "#+LaTeX_HEADER: \\linespread{1.05}\n")
        (insert "#+LaTeX_HEADER: \\usepackage[scaled]{helvet}\n")
        (insert "#+LaTeX_HEADER: \\usepackage{courier}\n")
        (insert "#+LaTeX_Header: \\usepackage{parskip}\n")
        (insert "#+LaTeX_HEADER: \\usepackage{paralist}\n")
        (insert "#+LaTeX_HEADER: \\let\\itemize\\compactitem\n")
        (insert "#+LaTeX_HEADER: \\let\\description\\compactdesc\n")
        (insert "#+LaTeX_HEADER: \\let\\enumerate\\compactenum\n")
        (insert "#+LaTeX_HEADER: \\usepackage{lastpage}\n")
        (insert "#+LaTeX_HEADER: \\usepackage{fancyhdr}\n")
        (insert "#+LaTeX_HEADER: \\pagestyle{fancy}\n")
        (insert "#+LaTeX_HEADER: \\renewcommand{\\headrulewidth}{0pt}\n")
        (insert "#+LaTeX_HEADER: \\lhead{} \\chead{} \\rhead{}\n")
        (insert "#+LaTeX_HEADER: \\lfoot{ver:1.0 date}\n")
        (insert "#+LaTeX_HEADER: \\cfoot{title}\n")
        (insert "#+LaTeX_HEADER: \\rfoot{\\thepage\\ of \\pageref{LastPage}}\n")
        (insert "#+LaTeX: \\thispagestyle{fancy}\n")
        (insert "#+LATEX_HEADER: \\usepackage{hyperref}\n")
        (insert "#+LATEX_HEADER: \\hypersetup{\n")
        (insert "#+LATEX_HEADER:     colorlinks,%\n")
        (insert "#+LATEX_HEADER:     citecolor=black,%\n")
        (insert "#+LATEX_HEADER:     filecolor=black,%\n")
        (insert "#+LATEX_HEADER:     linkcolor=blue,%\n")
        (insert "#+LATEX_HEADER:     urlcolor=black\n")
        (insert "#+LATEX_HEADER: }\n"))

;; (defun insert-burr-org ()
;;   "Insert template header in a org Burr"
;;   (interactive)
;; 	(insert " :PROPERTIES:")
;;         (insert "\n :Name: ")
;; 	(insert "\n :Ver: ")
;; 	(insert-epoch)
;;         (insert " (J2000.0)")
;; 	(insert "\n :Type: ")
;;         (insert "\n :Created: ")
;;         (insert-iso)
;;         (insert "@")
;;         (insert user-work-location-name)
;;         (insert " (")
;; 	(insert user-work-latitude)
;; 	(insert "-")
;; 	(insert user-work-longitude)
;; 	(insert ")")
;; 	(insert "\n :ID: ")
;; 	(insert (org-id-new))
;; 	;;(insert "\n :REL:")
;; 	(insert "\n :END:\n\n\n")
;; 	)

;; (defun insert-tspace-org ()
;;   "Insert template topicspace header in a org document"
;;   (interactive)
;;         (goto-char (point-min))
;;         (insert " Topicspace  -*- mode: org; fill-column: 60 -*-\n")
;;         (insert "#+STARTUP: showall\n")
;; 	(insert "#+FILETAGS: BMF")
;;         (insert "\n [ [[~/org/index.org][index]] | ]\n\n")
;; 	(insert "  :PROPERTIES:")
;;         (insert "\n  :Name:  _(topicspace)")
;; 	(insert "\n  :Entity: topicspace")
;; 	(insert "\n  :Ver: ")
;; 	(insert-epoch)
;; 	(insert " (J2000.0)")
;;         (insert "\n  :Created: ")
;;         (insert-iso)
;;         (insert "@")
;;         (insert user-work-location-name)
;;         (insert " (")
;; 	(insert user-work-latitude)
;; 	(insert "-")
;; 	(insert user-work-longitude)
;; 	(insert ")")
;; 	(insert "\n  :ID: ")
;; 	(insert (org-id-new))
;; 	(insert "\n  :Path:")
;;         (insert (format "%s" (buffer-file-name)))
;; 	(insert "\n  :END:\n\n\n")
;;         (insert "* \n") 
;; 	)


(defun insert-moleskine ()
  "Insert template org-mode properties box for notes transcribed from my moleskine into an org note"
  (interactive)
       ;; (goto-char (point-min))
	(insert "  :PROPERTIES:")
	(insert "\n  :Comment: Transcribed from small moleskine")
        (insert "\n  :Created: ")
	(insert "\n  :ID: ")
	(insert (org-id-new))
	(insert "\n  :END:\n\n\n")
	)

(defun insert-uuid ()
  "Insert a UUID at point"
  ;; FIXME: problem is that you have to be in org
  ;;  mode to use this
  (interactive)
  (insert (org-id-new)))

(defun insert-filename-org ()
  "Insert a file-name comment at point.  Used to update older muse files"
  (interactive)
  (insert "; Name:  ")
  (insert (format "%s" (buffer-file-name)))
  )

(defun insert-blog ()
  "Insert template header in a blog post"
  (interactive)
        (goto-char (point-min))
        (insert "#+STARTUP: showall\n")
	(insert "#+STARTUP: hidestars\n")
        (insert "#+INFOJS_OPT: view:info toc:t ltoc:nil\n")
	(insert "#+OPTIONS: H:2 num:nil tags:nil toc:nil timestamps:nil\n")
	(insert "#+BEGIN_HTML\n")
	(insert "---\n")
	(insert "layout: post\n")
	(insert "title : \"\"\n")
	(insert "topics: \n")
	(insert "style : blog\n")
	(insert "---\n")
	(insert "#+END_HTML\n\n\n"))

(defun insert-hex-bxid ()
  "Insert 4 slot hex BXID"
  (interactive)
  (insert "!")
  (insert-hex)
  (insert "!")
  (insert-hex)
  (insert "!")
  (insert-hex)
  (insert "!")
  (insert-hex))


(defun insert-burr ()
  "Insert template header for a new Burr"
  (interactive)

  (insert "* DRAFT \n")      
  (org-insert-time-stamp nil t t nil nil nil)
  (insert "\n\n:HEAD:\n")
  (insert ":bmf: bmfver:0.0,100_Canary\n")
  (insert ":id: [[bmf: /base/")
  (insert-epoch)
  (insert "\n")
  (insert ":entity-type: [[bmf:doc_(entity_type)]]\n")
  (insert ":bxid: bxid:")
  (insert-hex-bxid)
  (insert "\n")
  (insert ":layer: [[bmf:base_(layer_type)]]\n")
  (insert ":owner: [[agent:@deerpig]]\n")
  (insert ":created: stamp:")
  (insert-iso)
  (insert "@")
  (insert (princ user-work-latitude))
  (insert ";-")
  (insert (princ user-work-longitude))
  (insert "\n")
  (insert ":creator: [[agent:@deerpig]]\n")
  (insert ":version: ver:")
  (insert-epoch)
  (insert "\n")
  (insert ":END:\n")
  (insert ":TREE:\n")
  (insert ":tt: [[bmf:BMF_(topicspace)]]\n")
  (insert ":bt: [[\n")
  (insert ":pt: [[bmf:\n")
  (insert ":END:\n\n")
  (insert "** Scope Note\n")
  (insert "** References\n"))

  ;;(insert "** Scope Note\n")
  ;;(insert "=x= is a BMF element used in the =head= section.  The
  ;;         only allowed value is =x=.\n")
  ;;(insert "** Meta\n")
  ;;(insert ":module:       [[bmf:BMF_core]]\n")
  ;;(insert ":parent:       [[bmf:head_(section_type)]]\n")
  ;;(insert ":children:     not allowed\n")
  ;;(insert ":value:        \n")
  ;;(insert ":attributes:   not allowed\n")
  ;;(insert "** Usage\n")
  ;;(insert "*** XML Syntax\n")
  ;;(insert "#+begin_example\n\n")
  ;;(insert "#+end_example\n")
  ;;(insert "*** Wiki Syntax\n")
  ;;(insert "#+begin_example\n\n")
  ;;(insert "#+end_example\n")
  ;;(insert "** Schema\n")
  ;;(insert "** References\n"))

(global-set-key (kbd "<f9> b") 'insert-burr)


(defun insert-ideo ()
  "Insert ideograph character template at point"
  (interactive)
        ;;(goto-char (point-min))
        (insert ":Reading:   \n")
	(insert ":Cantonese: \n")
	(insert ":Pinyin:    \n")
	(insert ":UTF-8:     U+\n")
	(insert ":Grade:     \n")
	(insert ":Radical:   \n")
	(insert ":Stroke:    \n")
	(insert ":Frequency: \n\n\n")
	(insert ":Animated: \n")
	(insert ":Unihan:   \n")
	(insert ":Zongwhen: \n\n"))



#+end_src

** Org Width

Allow images width to be set in org buffers.

This only works if ImageMagick support is enabled when emacs is
enabled.

#+begin_src emacs-lisp

;; Org Width ===============================================
;; set image width in org buffers

(setq org-image-actual-width nil)
#+end_src
** Pomidor- [[https://github.com/TatriX/pomidor][TatriX/pomidor]] | GitHub

Pomodomo timer.

Compile problems when installing from Melpa, so commenting
out for now.

#+begin_src emacs-lisp 

;; Pomodomo Timer ==========================================
;;(use-package pomidor
;;  :ensure t)
#+end_src

** A Better Return

 - [[http://kitchingroup.cheme.cmu.edu/blog/2017/04/09/A-better-return-in-org-mode/?utm_source=feedburner&utm_medium=twitter&utm_campaign=Feed:+TheKitchinResearchGroup+(The+Kitchin+Research+Group)][A better return in org-mode]]

#+begin_src emacs-lisp :tangle no

;; Org Return ==============================================
;;
(defun scimax/org-return ()
  "Add new list or headline "
  (interactive)
  (cond
   ((org-in-item-p)
    (if (org-element-property :contents-begin (org-element-context))
        (org-insert-heading)
      (beginning-of-line)
      (setf (buffer-substring
             (line-beginning-position) (line-end-position)) "")
      (org-return)))
   ((org-at-heading-p)
    (if (not (string= "" (org-element-property :title (org-element-context))))
        (progn (org-end-of-meta-data)
               (org-insert-heading))
      (beginning-of-line)
      (setf (buffer-substring
             (line-beginning-position) (line-end-position)) "")))
   ((org-at-table-p)
    (if (-any?
         (lambda (x) (not (string= "" x)))
         (nth
          (- (org-table-current-dline) 1)
          (org-table-to-lisp)))
        (org-return)
      ;; empty row
      (beginning-of-line)
      (setf (buffer-substring
             (line-beginning-position) (line-end-position)) "")
      (org-return)))
   (t
    (org-return))))

(define-key org-mode-map (kbd "RET")
  'scimax/org-return)
#+end_src

