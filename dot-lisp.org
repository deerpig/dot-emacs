#   -*- mode: org; fill-column: 60 -*-

#+TITLE: emacs-lisp  | Deerpig's Dot Emacs
#+AUTHOR: Brad Collins
#+EMAIL: brad@chenla.la
#+STARTUP: showall
#+TOC: headlines 4
#+PROPERTY: header-args    :results drawer  :tangle emacs-lisp.el
:PROPERTIES:
:CUSTOM_ID: 
:Name:      /home/deerpig/proj/deerpig/dot-emacs/dot-lisp.org
:Created:   2017-07-02T18:01@Prek Leap (11.642600N-104.919210W)
:ID:        120c2920-d488-45ab-80b0-d4aa6b6560b8
:VER:       552265372.382542707
:GEO:       48P-491193-1287029-15
:BXID:      pig:OKW1-1633
:Class:     dotemacs
:Type:      literate-program
:Status:    wip
:Licence:   MIT/CC BY-SA 4.0
:END:

[[https://img.shields.io/badge/made%20by-Deerpig-999999.svg?style=flat-square]] 
[[https://img.shields.io/badge/class-dotemacs-0072B2.svg?style=flat-square]]
[[https://img.shields.io/badge/type-literate%20program-0072B2.svg?style=flat-square]]
[[https://img.shields.io/badge/status-wip-D55E00.svg?style=flat-square]]
[[https://img.shields.io/badge/licence-MIT%2FCC%20BY--SA%204.0-000000.svg?style=flat-square]]

* Introduction





* Lisp & Scheme Packages

** Header

#+begin_src emacs-lisp

;; Lisp & Scheme Packages ==================================

#+end_src

** Prettify Symbols

I like the idea, I have a function called /pretty lambdas/ which I've
been using for years.  This makes it easy to do any number of
character substitutions.

 - [[https://ekaschalk.github.io/post/prettify-mode/][Mathematical Notation in Emacs]] | Eric Kaschalk
 - [[http://emacsredux.com/blog/2014/08/25/a-peek-at-emacs-24-dot-4-prettify-symbols-mode/][A peek at Emacs 24.4: prettify-symbols-mode]] | Emacs Redux

Not working at the moment -- will look into it at some point.

#+begin_src emacs-lisp :tangle no

;; Prettify Symbols ========================================

(defconst lisp--prettify-symbols-alist
  '(("lambda"  . ?λ)
    (push '(">=" . ?≥) )))

(add-hook 'org-mode 'prettify-symbols-mode)
(global-prettify-symbols-mode +1)

#+end_src

#+RESULTS:
:RESULTS:
t
:END:


** Pretty Lambdas

#+begin_src emacs-lisp 

;; Pretty Lambdas ==========================================

(defun pretty-lambdas ()
  (font-lock-add-keywords
   nil `(("(\\(lambda\\>\\)"
	  (0 (progn (compose-region (match-beginning 1) (match-end 1)
				    ,(make-char 'greek-iso8859-7 107))
		    nil))))))

#+end_src

** Quack

#+begin_src emacs-lisp

;; Quack ---------------------------------------------------

(use-package quack
  :ensure t
  )

#+end_src


** Slime

#+begin_src emacs-lisp

;; Slime ---------------------------------------------------

(use-package slime
  :ensure t
  :init
  (setq inferior-lisp-program "/opt/sbcl/bin/sbcl")
  (setq slime-contribs '(slime-fancy))
  )

#+end_src

** Picolisp

#+begin_src emacs-lisp

;; Picolisp -------------------------------------------------

(use-package picolisp-mode
  :ensure t
  )

#+end_src
** Emacs Lisp

#+begin_src emacs-lisp

;; Emacs Lisp ==============================================

(add-hook 'emacs-lisp-mode-hook
	  '(lambda ()
	     (interactive)
	     (require 'eldoc)
	     (turn-on-eldoc-mode)
	     (pretty-lambdas)
	     (define-key emacs-lisp-mode-map [(control c) (x)] 'copy-eval-dwim-lisp)
	     ;; Default to auto-indent on Enter
	     (define-key emacs-lisp-mode-map [(control j)] 'newline)
	     (define-key emacs-lisp-mode-map [(control m)] 'newline-and-indent)))


#+end_src
