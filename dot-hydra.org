#+TITLE:Dot Emacs: Hydra
#+AUTHOR: Brad Collins
#+EMAIL: brad@chenla.la
#+PROPERTY: header-args    :results drawer  :tangle emacs-hydra.el

* Introduction

I was late to drink the hydra cool-aid.  It always sounded like a
great idea, but it just didn't click until recently.

Like many Emacs folks, over the years I have written any number of
functions that provided insert stuff.  And other functions to provide
menus to insert stuff -- especially unicode characters that I can't
remember the names of.

I've pretty replaced much all of the insert functions (or will soon)
replaced them using yasnippet and Helm provides a great interface to
inserting snippets, but this doesn't help to insert obscure unicode
characters.  That was my in for Hydra.

Since then, I realized that since I there are any number of Emacs
commands that I use, but use infrequently enough that I don't remember
the commands.  This is especially true for things like Twittering Mode
that as a huge number of powerful commands which I keep in a cheat sheet.
But Twit i just an example.  Calc, Rectangle Mode, Window Management,
etc. all fall into the same category.

  - [[https://en.wikipedia.org/wiki/Box_Drawing][Unicode Box Drawing Characters]] - Wikipedia


* Hydras
ngle: emacs-hydra.el
:EN
** File Header

#+begin_src emacs-lisp
;; -*- mode: EMACS-LISP; fill-column: 75; comment-column: 50; -*-
;; Emacs Hydra Files
#+end_src
** Hydra Package

Homepage:  [[https://github.com/abo-abo/hydra#awesome-docstring][Hydra | Github]]

Install the Hydra Package:

#+begin_src emacs-lisp
;; Hydra ===============================================
;; See https://github.com/abo-abo/hydra#awesome-docstring

(use-package hydra
  :ensure t  
  :config
(require 'hydra-examples) ;; needed for hydra-move-splitter
)
#+end_src

#+RESULTS:
: t

** Key Chords

The biggest challenge with Hydra is coming up with key-bindings for
each Hydra and then remembering those key-bindings... This is a
non-trivial problem.

This is where key chords come on.  I first tried key chords a few
years ago, but quickly found that if you aren't /very/ careful, they
get invoked when you type quickly.  Playing with delay settings for
chords didn't really help much.  I spent weeks trying any number of
combinations -- but still ended up invoking chords when I typed.  I
finally hit on the idea of using key-patterns rather than memnomic key
combinations.  It's not difficult to remember a shape of something.
This is where I got the idea for using horizontal key-chords.

#+begin_example
1 2 3 4 5 6 7 8 9 0 - =
 q w e r t y u i o p [ ]
  a s d f g h j k l ; ' 
#+end_example

On a standard keyboard with staggered rows of keys it's very easy to
press keys on two rows at the same time with one hand.  This gives you
combinations including /1q/, /5t/ or /8i/.  You just have to remember
the number or the letter and you get the companion character for free.
This works well for the top two rows, as well as the top row and the
third row (eg. /1a/, /3d/, /6h/).  I suppose if you exhaust those, you
can start using triple-key chords eg. /1qa/, /2ws/, /3ed/....  I hope
it won't come to that :)

#+begin_src emacs-lisp

;; Key Chords =============================================

(use-package key-chord
  :ensure t
  :init
  (progn
   ;; (fset 'key-chord-define 'my/key-chord-define)
    (setq key-chord-one-key-delay 0.16)
    (setq key-chord-two-key-delay 0.16)
    (key-chord-mode 1)
    ;;(key-chord-define-global "1q"     ')
    (key-chord-define-global "2w"     'hydra-window/body)
    (key-chord-define-global "3e"     'hydra-elfeed/body)
    (key-chord-define-global "4r"     'hydra-rectangle/body)
    (key-chord-define-global "5t"     'hydra-twittering/body)
    (key-chord-define-global "6y"     'hydra-transpose/body)
    (key-chord-define-global "7u"     'hydra-unicode/body)
    (key-chord-define-global "8i"     'hydra-logic/body)
    (key-chord-define-global "9o"     'hydra-greek/body)
    (key-chord-define-global "0p"     'hydra-calendar/body)
    ))
#+end_src

#+RESULTS:
:RESULTS:
nil
:END:

** Window Management Hydra

I use /Bunsen Labs Linux/ (formally known as CrunchBang Linux)
which is Debian running OpenBox window manager with some very nice
integration and customization.  Openbox allows you do do practically
all window management using the keyboard.  I bind all window moving
and resizing commands using the <WIN> (windows key).  Once I've opened
emacs I can resize the frame using Openbox as I want it.  But after
that all windows within the emacs frame must be managed using emacs.

The WinMove package provides a very nice way of moving around windows
using arrow keys.  But finding an unused key-binding is difficult.
The OpenBox + arrow key commands use <WIN> and Org-Mode uses arrow-key
combination for moving stuff around, setting dates, priorities and
toggling TODO states.

This Hydra provides an interface for splitting windows and moving
between windows using the arrow keys.

The most common use case for this is when I set up a Frame for using
IRC.  Here is an example of the workflow:

  - Create a new frame C-x 5 2 and move it to it's own desktop using
    <WIN> key commands in Openbox.
  - Start IRC with M-x irc, which logs into two different irc servers
    and the Slack irc gateway.  
  - Invoke the Hydra using the keychord '2w' and split the frame up to
    four to six different ways.
  - Use the c-<arrow> keys to move to each window, and M-x b which
    opens the buffer list in Helm and to choose the chat room for each
    window.
  - Press the <SPC> key to exit the Hydra.

This hyra uses the pink /color/ so multiple commands can be invoked in
the hydra without exiting.  If I need to simply split or move between
two window when editing, C-x o and C-x 0 and the C-x 5 commands work
well as one offs.  It's when you have to do a lot of moving and
splitting that this hydra really shines.

The <SPC> spacebar is used to exit the hydra.

#+begin_src emacs-lisp
;; hydra-window --------------------------------------------
;;
;; hydra for managing windows

(defhydra hydra-window (:color pink :hint nil :timeout 20)
  "
         Move                    Resize            Split
╭─────────────────────────────────────────────────────────────┐
         ^_<up>_^                    ^_C-<up>_^            [_v_]ertical
          ^^▲^^                         ^^▲^^              [_h_]orizontal
 _<left>_ ◀   ▶ _<right>_    _C-<left>_ ◀   ▶ _C-<right>_
          ^^▼^^                         ^^▼^^              ╭──────────┐
        ^_<down>_^                  ^_C-<down>_^           quit : [_SPC_]
"
  ("<left>" windmove-left)
  ("<down>" windmove-down)
  ("<up>" windmove-up)
  ("<right>" windmove-right)
  ("h" split-window-below)
  ("v" split-window-right)
  ("C-<up>" hydra-move-splitter-up) 
  ("C-<down>" hydra-move-splitter-down)
  ("C-<left>" hydra-move-splitter-left)
  ("C-<right>" hydra-move-splitter-right)
  ("SPC" nil))
#+end_src

#+RESULTS:
: hydra-window/body

** Unicode Character Hydra

Everyone has a set of odd characters they need to insert into
documents from time to time.  I not only write code, but work with a
lot of 19th century scholarly texts.  It was common practice up
through the late 20th century to include quotes in the original greek,
latin, french and german without providing a translation (cheeky
bastards).

European diacritics are easy enough to insert using emacs' C-x 8.  And
Hanzi/Kanji have their own input methods.  But for puncuation
characters and the odd germanic character it's often easier to have a
way of inserting commonly used characters from a memu -- thus this
Hydra.

We have a lot of special purpose hydras for inserting things, but this
is the general catch-all for anything that doesn't fit in it's own
specialized hydra.

This hydra uses the blue /color/ so that when an item is chosen the
character is inserted and the hydra exits.

#+begin_src emacs-lisp
;; hydra unicode -------------------------------------------

(defhydra hydra-unicode (:color blue :hint nil)
  "
                                                                         ╭─────────┐
                                                                         │ Unicode │
 ╭───────────────────────────────────────────────────────────────────────┴─────────╯
  Punctuation:  • [_b_] ★ [_s_] · [_._] — [_-_] ° [_d_]
  Typography :  § [_S_] ¶ [_p_] ※ [_r_] † [_+_] ‡ [_=_] № [_n_] ⁂ [_*_] ╭───────────────────────┐
  Germanic   :  Ð [_E_] ð [_e_] þ [_T_] Þ [_t_]                    Japan: 〇 [_0_] ₸ [_$_]
  Money      :  ¢ [_1_] € [_2_] ฿ [_3_] £ [_4_] ￥ [_5_]              Marks: ® [_6_] ™ [_7_] © [_8_]
 ╭──────────────────────────────────────────────────────┐
  Arrows    :  ← [_<left>_] → [_<right>_] ↑ [_<up>_] ↓ [_<down>_]
"
  ;; Japan
  ("0" (lambda () (interactive) (insert "〇"))) ;; zero
  ("$" (lambda () (interactive) (insert "₸")))  ;; postal mark
  ;; Typoggrphy
  ("b" (lambda () (interactive) (insert "•"))) ;; bullet
  ("+" (lambda () (interactive) (insert "†"))) ;; dagger
  ("=" (lambda () (interactive) (insert "‡"))) ;; double dagger
  ("d" (lambda () (interactive) (insert "°"))) ;; degree
  ("." (lambda () (interactive) (insert "·"))) ;; mid dot
  ("-" (lambda () (interactive) (insert "—"))) ;; em dash
  ("S" (lambda () (interactive) (insert "§"))) ;; Section
  ("s" (lambda () (interactive) (insert "★"))) ;; star
  ("n" (lambda () (interactive) (insert "№"))) ;; numero
  ("*" (lambda () (interactive) (insert "⁂"))) ;; asterism (centered text break)  
  ("p" (lambda () (interactive) (insert "¶"))) ;; pilcrow (paragraph)
  ("r" (lambda () (interactive) (insert "※"))) ;; note
  ;; Germanic 
  ("E" (lambda () (interactive) (insert "Ð"))) ;; eth Uppercase
  ("e" (lambda () (interactive) (insert "ð"))) ;; eth
  ("t" (lambda () (interactive) (insert "Þ"))) ;; thorn
  ("T" (lambda () (interactive) (insert "þ"))) ;; thorn uppercase
  ;; Arrows
  ("<left>"  (lambda () (interactive) (insert "←"))) ;; left arrow
  ("<right>" (lambda () (interactive) (insert "→"))) ;; right arrow
  ("<up>"    (lambda () (interactive) (insert "↑"))) ;; up arrow
  ("<down>"  (lambda () (interactive) (insert "↓"))) ;; down arrow
  ;; Money
  ("1" (lambda () (interactive) (insert "¢"))) ;; cent
  ("2" (lambda () (interactive) (insert "€"))) ;; euro
  ("3" (lambda () (interactive) (insert "฿"))) ;; baht
  ("4" (lambda () (interactive) (insert "£"))) ;; pound
  ("5" (lambda () (interactive) (insert "￥"))) ;; yen
  ;; Marks
  ("6" (lambda () (interactive) (insert "®"))) ;; registered trademark
  ("7" (lambda () (interactive) (insert "™"))) ;; trademark
  ("8" (lambda () (interactive) (insert "©"))) ;; copyright
  ("<SPC>" nil nil))
#+end_src

** Calendar & Weekdays Hydra

This hydra is designed for entering a Hanzi/Kanji date string within
the hydra.  To make this work we explicitly set numbers in the hydra
so that numbers are not treated as prefix arguments -- this might be
something that helm is doing not hydra....

#+begin_example
2017年02月11日 (土)  2017-02-11 (Sat)
#+end_example

The letters used in the hydra to invoke the days of the week
correspond to the english meaning for each character.

  |    | hydra | english   | planet               | meaning              |
  |----+-------+-----------+----------------------+----------------------|
  | 年 | Y     | Year      |                      |                      |
  | 月 | M     | Month     | moon                 | lunar month          |
  | 日 | D     | Day       | sun                  | solar day            |
  | 日 | s     | sunday    | male   陽 yáng, /yō/ | sun                  |
  | 月 | m     | monday    | female 陰 yīn, /in/  | moon                 |
  | 火 | f     | tuesday   | mars                 | fire                 |
  | 水 | w     | wednesday | Mercury              | water                |
  | 木 | t     | thursday  | Jupiter              | tree or wood         |
  | 金 | g     | friday    | Venus                | gold[1]              |
  | 土 | e     | saturday  | earth                | ground/element earth |

[1] Think payday--'the eagle flys on friday'

For more info about Japanese and Chinese weekday names see:
[[http://www.cjvlang.com/Dow/index.html]]

Japanese days of the week can be swapped out for:

Chinese:

   星期日 星期天 星期一 星期二 星期三 星期四 星期五 星期六

English:

   Sun Mon Tue Wed Thu Fri Sat (or euro equiv) 

Personally I think the Chinese names are too long winded, obvious and
boring (numbers 1-6) and the english have lost the associated
mythology and link to the planets that they once had.  That and IMHO
the names are not as elegant or evocative as the Japanese YMMV.

This hydra uses the pink /color/ that doesn't exit until you press
<SPC>. 

#+begin_src emacs-lisp
;; calendar & weekday hydra --------------------------------

;; This hydra is designed for entering a Hanzi/Kanji
;; date string within the hydra.  To make this work we
;; explicitly set numbers in the hydra so that numbers
;; are not treated as prefix arguments -- this might be
;; something that helm is doing not hydra....

(defhydra hydra-calendar (:color pink :hint nil)
  "
                                                                ╭──────────┐
                                                                │ Calendar │
 ╭──────────────────────────────────────────────────────────────┴──────────╯
  Calendar  :  年 [_Y_] 月 [_M_] 日 [_D_]
  Weekdays  :  (日) [_s_] (月) [_m_] (火) [_f_] (水) [_w_] (木) [_t_] (金) [_g_] (土) [_e_]
"
  ;; Calendar
  ("Y" (lambda () (interactive) (insert "年"))) ;; year
  ("M" (lambda () (interactive) (insert "月"))) ;; moon/month
  ("D" (lambda () (interactive) (insert "日"))) ;; day/sun
  ;; Weekdays
  ("s" (lambda () (interactive) (insert " (日)"))) ;; sunday sun
  ("m" (lambda () (interactive) (insert " (月)"))) ;; monday moon
  ("f" (lambda () (interactive) (insert " (火)"))) ;; tuesday fire
  ("w" (lambda () (interactive) (insert " (水)"))) ;; wednesday water
  ("t" (lambda () (interactive) (insert " (木)"))) ;; thursday wood/tree
  ("g" (lambda () (interactive) (insert " (金)"))) ;; friday gold (payday!)
  ("e" (lambda () (interactive) (insert " (土)"))) ;; saturday earth
  ("0" (lambda () (interactive) (insert "0")))    ;;
  ("1" (lambda () (interactive) (insert "1")))    ;;
  ("2" (lambda () (interactive) (insert "2")))    ;;
  ("3" (lambda () (interactive) (insert "3")))    ;;  set numbers explicitly
  ("4" (lambda () (interactive) (insert "4")))    ;;  so that we can write 
  ("5" (lambda () (interactive) (insert "5")))    ;;  whole date inside hydra
  ("6" (lambda () (interactive) (insert "6")))    ;;
  ("7" (lambda () (interactive) (insert "7")))    ;;
  ("8" (lambda () (interactive) (insert "8")))    ;;
  ("9" (lambda () (interactive) (insert "9")))    ;;
  ("<SPC>" nil nil))
#+end_src
 
** Greek Alphabet Hydra

This hydra is largely untested, the key-bindings are based on several
key-mappings I used before for greek characters.  I expect to need to
input a number of classical greek quotes in an upcoming project so we
will see how well this works then.  In the mean time, any feedback on
how to improve this would be very welcome.

This is the only hydra where I use <ESC> escape key to exit the
hydra.  This is because both 'q' and <SPC> are used for composing
strings.

#+begin_src emacs-lisp :tangle emacs-hydra.el

;; hydra greek ---------------------------------------------

(defhydra hydra-greek (:color pink :hint nil)
  "
                                                                 ╭───────┐
                                                                 │ Greek │
 ╭───────────────────────────────────────────────────────────────┴───────╯
  α [_a_] β [_b_] Y [_g_] δ [_d_] ε [_e_] ζ [_z_] η [_h_] θ [_q_] ι [_i_] κ [_k_] λ [_l_] μ [_m_]
  ν [_n_] ξ [_x_] ο [_o_] π [_p_] ρ [_r_] σ [_s_] τ [_t_] υ [_u_] φ [_j_] χ [_c_] ψ [_y_] ω [_w_]

  Α [_A_] Β [_B_] Γ [_G_] Δ [_D_] Ε [_E_] Ζ [_Z_] Η [_H_] Θ [_Q_] Ι [_I_] Κ [_K_] Λ [_l_] Μ [_M_]
  Ν [_N_] Ξ [_X_] Ο [_O_] Π [_P_] Ρ [_R_] Σ [_S_] Τ [_T_] Υ [_U_] Φ [_J_] Χ [_C_] Ψ [_Y_] Ω [_W_]
 ╭────────────┐
  Quit  [_<ESC>_]
"
  ("a" (lambda () (interactive) (insert "α")))
  ("b" (lambda () (interactive) (insert "β")))
  ("g" (lambda () (interactive) (insert "γ")))
  ("d" (lambda () (interactive) (insert "δ")))
  ("e" (lambda () (interactive) (insert "ε")))
  ("z" (lambda () (interactive) (insert "ζ")))
  ("h" (lambda () (interactive) (insert "η")))
  ("q" (lambda () (interactive) (insert "θ")))
  ("i" (lambda () (interactive) (insert "ι")))
  ("k" (lambda () (interactive) (insert "κ")))
  ("l" (lambda () (interactive) (insert "λ")))
  ("m" (lambda () (interactive) (insert "μ")))
  ("n" (lambda () (interactive) (insert "ν")))
  ("x" (lambda () (interactive) (insert "ξ")))
  ("o" (lambda () (interactive) (insert "ο")))
  ("p" (lambda () (interactive) (insert "π")))
  ("r" (lambda () (interactive) (insert "ρ")))
  ("s" (lambda () (interactive) (insert "σ")))
  ("t" (lambda () (interactive) (insert "τ")))
  ("u" (lambda () (interactive) (insert "υ")))
  ("f" (lambda () (interactive) (insert "ϕ")))
  ("j" (lambda () (interactive) (insert "φ")))
  ("c" (lambda () (interactive) (insert "χ")))
  ("y" (lambda () (interactive) (insert "ψ")))
  ("w" (lambda () (interactive) (insert "ω")))
  ("A" (lambda () (interactive) (insert "Α")))
  ("B" (lambda () (interactive) (insert "Β")))
  ("G" (lambda () (interactive) (insert "Γ")))
  ("D" (lambda () (interactive) (insert "Δ")))
  ("E" (lambda () (interactive) (insert "Ε")))
  ("Z" (lambda () (interactive) (insert "Ζ")))
  ("H" (lambda () (interactive) (insert "Η")))
  ("Q" (lambda () (interactive) (insert "Θ")))
  ("I" (lambda () (interactive) (insert "Ι")))
  ("K" (lambda () (interactive) (insert "Κ")))
  ("L" (lambda () (interactive) (insert "Λ")))
  ("M" (lambda () (interactive) (insert "Μ")))
  ("N" (lambda () (interactive) (insert "Ν")))
  ("X" (lambda () (interactive) (insert "Ξ")))
  ("O" (lambda () (interactive) (insert "Ο")))
  ("P" (lambda () (interactive) (insert "Π")))
  ("R" (lambda () (interactive) (insert "Ρ")))
  ("S" (lambda () (interactive) (insert "Σ")))
  ("T" (lambda () (interactive) (insert "Τ")))
  ("U" (lambda () (interactive) (insert "Υ")))
  ("F" (lambda () (interactive) (insert "Φ")))
  ("J" (lambda () (interactive) (insert "Φ")))
  ("C" (lambda () (interactive) (insert "Χ")))
  ("Y" (lambda () (interactive) (insert "Ψ")))
  ("W" (lambda () (interactive) (insert "Ω")))
  ("<SPC>" (lambda () (interactive) (insert " ")))
  ("<ESC>" nil nil))

#+end_src

** Math & Logic Hydra

I typically don't use a lot of math symbols in running text, if I need
to include a formula, LaTex is the way to go.  However, I often use
logic symbols in running text, thus this hydra.

This hydra is blue /color/ so the hydra exits after choosing a key.  
You can explicitly exit the hydra using <SPC> and there is a 30 second
timeout that exits the hydra if nothing is chosen.

#+begin_src emacs-lisp :tangle emacs-hydra.el
;; hydra math & logic --------------------------------------

(defhydra hydra-logic (:color blue :hint nil :timeout 30)
  "
                                                                 ╭───────┐
                                                                 │ Math  │
  ╭──────────────────────────────────────────────────────────────┴───────╯
   ≈ [_1_] ≡ [_2_] ≠ [_3_] ∞ [_4_] × [_5_] ± [_6_] ∓ [_7_] ÷ [_8_] √ [_9_]
                                                                 ╭───────┐
                                                                 │ Logic │
  ╭──────────────────────────────────────────────────────────────┴───────╯
   ∀ [_a_] ∁ [_b_] ∃ [_c_] ∄ [_d_] ∅ [_e_] ¬ [_f_] ∧ [_g_] ∨ [_h_] ∩ [_i_] ∪ [_j_] ∈ [_k_] ∉ [_l_]
   ∋ [_m_] ∌ [_n_] ⊂ [_o_] ⊃ [_p_] ⊄ [_q_] ⊅ [_r_] ⊆ [_s_] ⊇ [_t_] ⊈ [_u_] ⊉ [_v_] ⋄ [_w_]
"
  ;; Math
  ("1" (lambda () (interactive) (insert "≈")))
  ("2" (lambda () (interactive) (insert "≡")))
  ("3" (lambda () (interactive) (insert "≠")))
  ("4" (lambda () (interactive) (insert "∞")))
  ("5" (lambda () (interactive) (insert "×")))
  ("6" (lambda () (interactive) (insert "±")))
  ("7" (lambda () (interactive) (insert "∓")))
  ("8" (lambda () (interactive) (insert "÷")))
  ("9" (lambda () (interactive) (insert "√")))
  ;; Logic
  ("a" (lambda () (interactive) (insert "∀")))
  ("b" (lambda () (interactive) (insert "∁")))
  ("c" (lambda () (interactive) (insert "∃")))
  ("d" (lambda () (interactive) (insert "∄")))
  ("e" (lambda () (interactive) (insert "∅")))
  ("f" (lambda () (interactive) (insert "¬")))
  ("g" (lambda () (interactive) (insert "∧")))
  ("h" (lambda () (interactive) (insert "∨")))
  ("i" (lambda () (interactive) (insert "∩")))
  ("j" (lambda () (interactive) (insert "∪")))
  ("k" (lambda () (interactive) (insert "∈")))
  ("l" (lambda () (interactive) (insert "∉")))
  ("m" (lambda () (interactive) (insert "∋")))
  ("n" (lambda () (interactive) (insert "∌")))
  ("o" (lambda () (interactive) (insert "⊂")))
  ("p" (lambda () (interactive) (insert "⊃")))
  ("q" (lambda () (interactive) (insert "⊄")))
  ("r" (lambda () (interactive) (insert "⊅")))
  ("s" (lambda () (interactive) (insert "⊆")))
  ("t" (lambda () (interactive) (insert "⊇")))
  ("u" (lambda () (interactive) (insert "⊈")))
  ("v" (lambda () (interactive) (insert "⊉")))
  ("w" (lambda () (interactive) (insert "⋄")))
  ("<SPC>" nil nil))
#+end_src

** Twittering Mode Hydra

I tend to use Twitter in bursts, and even then, mostly when I tweet
breaking news that is happening in Cambodia.  The noise level on
Twitter is annoying, and the tendency for many people to include an
image for /every/ tweet they send greatly reduces its utility for me.
So Twittering mode is a great way of using twitter without being
bombarded with every bloody cat picture or whatever they are eating
for lunch.  A couple of years ago I unsubbed from anyone who used the
an annoying adjective like "yummy" together with "veggie" together
with some kind of food, as in "I just had a yummy veggie pizza".  Food
should not be a fetish or an ideology.

This wonderful hydra was taken from the Hydra wiki, and was an
inspiration for how creative and powerful /hints/ can be.  I've see
other hydras that have obviously been inspired by this hydra as well.

Twittering mode has a lot of commands, and I always forget how to
retweet follow links and look up profiles.  This hyra is the perfect
cheat sheet for the occasional user to get the most out of Twittering
Mode.

#+begin_src emacs-lisp
;; hydra twittering ----------------------------------------

(defhydra hydra-twittering (:color blue :hint nil  :timeout 10)
        "
                                                                    ╭────────────┐
     Tweets                User                        Timeline     │ Twittering │
  ╭─────────────────────────────────────────────────────────────────┴────────────╯
    _k_  [_t_] post tweet      _p_  [_f_] follow                  ^_g_^      [_u_] update
    ^↑^  [_X_] delete tweet    ^↑^  [_F_] unfollow              ^_S-SPC_^    [_._] new
    ^ ^  [_r_] retweet         ^ ^  [_d_] direct message          ^^↑^^      [^@^] current user
    ^↓^  [_R_] retweet & edit  ^↓^  [_i_] profile (browser)   _h_ ←   → _l_  [_a_] toggle
    _j_  [_b_] favorite        _n_   ^ ^                          ^^↓^^
    ^ ^  [_B_] unfavorite      ^ ^   ^ ^                         ^_SPC_^
    ^ ^  [_RET_] reply         ^ ^   ^ ^                          ^_G_^
    ^ ^  [_T_] show Thread
    ^ ^  [_y_] yank url          Items                     Do
    ^ ^  [_Y_] yank tweet     ╭───────────────────────────────────────────────────────
    ^ ^  [_e_] edit mode        _<backtab>_ ← _o_pen → _<tab>_    [_q_] exit
    ^ ^   ^ ^                   ^         ^   ^ ^      ^     ^    [_/_] search
  --------------------------------------------------------------------------------
       "
       ("\\" hydra-master/body "back")
       ("<ESC>" nil "quit")
       ("q"          twittering-kill-buffer)
       ("e"          twittering-edit-mode)
       ("j"          twittering-goto-next-status :color red)
       ("k"          twittering-goto-previous-status :color red)
       ("h"          twittering-switch-to-next-timeline :color red)
       ("l"          twittering-switch-to-previous-timeline :color red)
       ("g"          beginning-of-buffer)
       ("G"          end-of-buffer)
       ("t"          twittering-update-status-interactive)
       ("X"          twittering-delete-status)
       ("RET"        twittering-reply-to-user)
       ("r"          twittering-native-retweet)
       ("R"          twittering-organic-retweet)
       ("d"          twittering-direct-message)
       ("u"          twittering-current-timeline)
       ("b"          twittering-favorite)
       ("B"          twittering-unfavorite)
       ("f"          twittering-follow)
       ("F"          twittering-unfollow)
       ("i"          twittering-view-user-page)
       ("/"          twittering-search)
       ("."          twittering-visit-timeline)
       ("@"          twittering-other-user-timeline)
       ("T"          twittering-toggle-or-retrieve-replied-statuses)
       ("o"          twittering-click)
       ("<tab>"        twittering-goto-next-thing :color red)
       ("<backtab>"  twittering-goto-previous-thing :color red)
       ("n"          twittering-goto-next-status-of-user :color red)
       ("p"          twittering-goto-previous-status-of-user :color red)
       ("SPC"        twittering-scroll-up :color red)
       ("S-SPC"      twittering-scroll-down :color red)
       ("y"          twittering-push-uri-onto-kill-ring)
       ("Y"          twittering-push-tweet-onto-kill-ring)
       ("a"          twittering-toggle-activate-buffer))
#+end_src

** Rectangle Mode Hydra

Emacs rectangle editing is one of the things that sets emacs apart
from nearly any other tool.  I don't rectangles that often but when I
do they save a significant amount of time

This hydra was another gem from the hydra wiki. See: 

  - [[http://oremacs.com/2015/02/25/rectangle-hydra/]]
  - [[http://cestlaz.github.io/posts/using-emacs-27-rectangles/#.WJ542LMxVpi]]

The author sez the ascii art in the hydra is a cat, but to me it looks
more like the Cat Bus in Totorro :)

#+begin_src emacs-lisp
;; hydra rectangle -----------------------------------------
;;
;; rectangle editing is very cool, but it's one of those
;; things you use seldom enough that you can't remember
;; the commands.  The hydra makes all of that go away....
;
;; See: http://oremacs.com/2015/02/25/rectangle-hydra/
;;      http://cestlaz.github.io/posts/using-emacs-27-rectangles/#.WJ542LMxVpi

(defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                           :color pink
                           :post (deactivate-mark)
			   :timeout 30)
  "
  ^_k_^     _d_elete    _s_tring     |\\     ‗,,,--,,‗
_h_   _l_   _o_k        _y_ank       /,`.-'`'   .‗  \-;;,‗
  ^_j_^     _n_ew-copy  _r_eset     |,4-  ) )‗   .;.(  `'-'
^^^^        _e_xchange  _u_ndo     '---''(‗/.‗)-'(‗\‗)
^^^^        ^ ^         _p_aste
"
  ("h" backward-char nil)
  ("l" forward-char nil)
  ("k" previous-line nil)
  ("j" next-line nil)
  ("e" ora-ex-point-mark nil)
  ("n" copy-rectangle-as-kill nil)
  ("d" delete-rectangle nil)
  ("r" (if (region-active-p)
           (deactivate-mark)
         (rectangle-mark-mode 1)) nil)
  ("y" yank-rectangle nil)
  ("u" undo nil)
  ("s" string-rectangle nil)
  ("p" kill-rectangle nil)
  ("o" nil nil))

(global-set-key (kbd "C-x SPC") 'hydra-rectangle/body)
#+end_src

** Hydra Join Lines (placeholder)

This hydra is from the Hydra Wiki.  Still needs to be integrated into
my workflow.

#+begin_src emacs-lisp
;; hydra join lines ----------------------------------------

(defhydra hydra-join-lines (:timeout 5)
  ("<up>" join-line)
  ("<down>" (join-line 1))
  ("t" join-line)
  ("n" (join-line 1))
  ("<SPC>" nil nil))
#+end_src

** Emacs Transpose (placeholder)

This hydra is from the Hydra Wiki.  Good stuff, but still not sure how
I'm going to integrate.

#+begin_src emacs-lisp
;; hydra transpose ------------------------------------------

(defhydra hydra-transpose (:color red  :timeout 5)
    "Transpose"
    ("c" transpose-chars "characters")
    ("w" transpose-words "words")
    ("o" org-transpose-words "Org mode words")
    ("l" transpose-lines "lines")
    ("s" transpose-sentences "sentences")
    ("e" org-transpose-elements "Org mode elements")
    ("p" transpose-paragraphs "paragraphs")
    ("t" org-table-transpose-table-at-point "Org mode table")
    ("q" nil "cancel" :color blue))


(defun ora-ex-point-mark ()
  (interactive)
  (if rectangle-mark-mode
      (exchange-point-and-mark)
    (let ((mk (mark)))
      (rectangle-mark-mode 1)
      (goto-char mk))))
#+end_src

** Elfeed Hydra

Hydra for the elfeed news reader.


#+begin_src emacs-lisp
(defhydra hydra-elfeed (:color pink :hint nil)
   "
                                                                   ╭─────────┐
                                                                   │ Elfeed  │
 ╭───────────────────────────────────────────────────────────┬─────┴─────────╯
  Tags :    Torrents [_d_]   Comics [_c_] Emacs [_e_| Tech [_t_]     |       All [_A_]  
 ╭───────────────────────────────────────────────────────────┤     Today [_T_]  
  Feeds: Boing Boing [_b_] Slashdot [_s_]   Ars Technica [_a_]     │   Starred [_*_]  
          Cool Tools [_l_] Long Now [_l_]                        │    Marked [_M_]
 ╭───────────────────────────────────────────────────────────┘ Quit/Save [_q_]
  Quit [_<SPC>_]
"
   ("c" (elfeed-search-set-filter "@6-months-ago +comic"))
   ("e" (elfeed-search-set-filter "@6-months-ago +emacs"))
   ("t" (elfeed-search-set-filter "@6-months-ago +tech"))

   ("b" (elfeed-search-set-filter "@6-months-ago +boing"))
   ("s" (elfeed-search-set-filter "@6-months-ago +slash"))
   ("a" (elfeed-search-set-filter "@6-months-ago +ars"))
   ("d" (elfeed-search-set-filter "@6-months-ago +torrent"))
   ("l" (elfeed-search-set-filter "@6-months-ago +longnow"))
   ("o" (elfeed-search-set-filter "@6-months-ago +tools"))

   ("*" (elfeed-search-set-filter "@6-months-ago +star"))
   ("M" elfeed-toggle-star nil)
   ("A" (elfeed-search-set-filter "@6-months-ago"))
   ("T" (elfeed-search-set-filter "@1-day-ago"))
   ("q" bjm/elfeed-save-db-and-bury nil :color blue)
   ("<SPC>" nil nil)
   )
#+end_src

#+RESULTS:
:RESULTS:
hydra-elfeed/body
:END:
