#   -*- mode: org; fill-column: 60 -*-

#+TITLE: Hydra  | Deerpig's Dot Emacs
#+AUTHOR: Brad Collins
#+EMAIL: brad@chenla.la
#+STARTUP: showall
#+TOC: headlines 4
#+PROPERTY: header-args    :results drawer  :tangle emacs-hydra.el
:PROPERTIES:
:CUSTOM_ID: 
:Name:      /home/deerpig/proj/deerpig/dot-emacs/dot-hydra.org
:Created:   2017-07-02T17:53@Prek Leap (11.642600N-104.919210W)
:ID:        c100a1f4-b059-4ec4-84b7-1c899db2a444
:VER:       552264872.722684514
:GEO:       48P-491193-1287029-15
:BXID:      pig:HAQ2-5424
:Class:     dotemacs
:Type:      literate-program
:Status:    wip
:Licence:   MIT/CC BY-SA 4.0
:END:

[[https://img.shields.io/badge/made%20by-Deerpig-999999.svg?style=flat-square]] 
[[https://img.shields.io/badge/class-dotemacs-0072B2.svg?style=flat-square]]
[[https://img.shields.io/badge/type-literate%20program-0072B2.svg?style=flat-square]]
[[https://img.shields.io/badge/status-wip-D55E00.svg?style=flat-square]]
[[https://img.shields.io/badge/licence-MIT%2FCC%20BY--SA%204.0-000000.svg?style=flat-square]]

* Introduction

I was late to drink the hydra cool-aid.  It always sounded like a
great idea, but it just didn't click until recently.

Like many Emacs folks, over the years I have written any number of
functions that provided insert stuff.  And other functions to provide
menus to insert stuff -- especially unicode characters that I can't
remember the names of.

I've pretty replaced much all of the insert functions (or will soon)
replaced them using yasnippet and Helm provides a great interface to
inserting snippets, but this doesn't help to insert obscure unicode
characters.  That was my in for Hydra.

Since then, I realized that since I there are any number of Emacs
commands that I use, but use infrequently enough that I don't remember
the commands.  This is especially true for things like Twittering Mode
that as a huge number of powerful commands which I keep in a cheat sheet.
But Twit i just an example.  Calc, Rectangle Mode, Window Management,
etc. all fall into the same category.

  - [[https://en.wikipedia.org/wiki/Box_Drawing][Unicode Box Drawing Characters]] - Wikipedia


* Hydras

** File Header
:PROPERTIES:
:ID:       184c2ad9-3f3f-41d0-8c7f-7b059620b02d
:END:

#+begin_src emacs-lisp
;; -*- mode: EMACS-LISP; fill-column: 75; comment-column: 50; -*-
;; Emacs Hydra Files
#+end_src
** Hydra Package
:PROPERTIES:
:ID:       8a83fa27-13ae-4ba6-94c1-d7725dd08564
:END:

Homepage:  [[https://github.com/abo-abo/hydra#awesome-docstring][Hydra | Github]]

Install the Hydra Package:

#+begin_src emacs-lisp
;; Hydra ===============================================
;; See https://github.com/abo-abo/hydra#awesome-docstring

(use-package hydra
  :ensure t  
  :config
(require 'hydra-examples) ;; needed for hydra-move-splitter
)
#+end_src

#+RESULTS:
: t

** Key Chords
:PROPERTIES:
:ID:       32489c4b-f058-4da0-a2ba-1662de184fa2
:END:

The biggest challenge with Hydra is coming up with key-bindings for
each Hydra and then remembering those key-bindings... This is a
non-trivial problem.

This is where key chords come on.  I first tried key chords a few
years ago, but quickly found that if you aren't /very/ careful, they
get invoked when you type quickly.  Playing with delay settings for
chords didn't really help much.  I spent weeks trying any number of
combinations -- but still ended up invoking chords when I typed.  I
finally hit on the idea of using key-patterns rather than memnomic key
combinations.  It's not difficult to remember a shape of something.
This is where I got the idea for using horizontal key-chords.

#+begin_example
1 2 3 4 5 6 7 8 9 0 - =
 q w e r t y u i o p [ ]
  a s d f g h j k l ; ' 
#+end_example

On a standard keyboard with staggered rows of keys it's very easy to
press keys on two rows at the same time with one hand.  This gives you
combinations including /1q/, /5t/ or /8i/.  You just have to remember
the number or the letter and you get the companion character for free.
This works well for the top two rows, as well as the top row and the
third row (eg. /1a/, /3d/, /6h/).  I suppose if you exhaust those, you
can start using triple-key chords eg. /1qa/, /2ws/, /3ed/....  I hope
it won't come to that :)

#+begin_src emacs-lisp

;; Key Chords ==============================================

(use-package key-chord
  :ensure t
  :init
  (progn
   ;; (fset 'key-chord-define 'my/key-chord-define)
    (setq key-chord-one-key-delay 0.16)
    (setq key-chord-two-key-delay 0.16)
    (key-chord-mode 1)
    (key-chord-define-global "1q"     'hydra-badge/body)
    (key-chord-define-global "2w"     'hydra-window/body)
    (key-chord-define-global "3e"     'hydra-org/body)
    (key-chord-define-global "4r"     'hydra-rectangle/body)
    (key-chord-define-global "5t"     'hydra-twittering/body)
    (key-chord-define-global "6y"     'hydra-org/body)
    (key-chord-define-global "7u"     'hydra-unicode/body)
    (key-chord-define-global "8i"     'hydra-logic/body)
    (key-chord-define-global "9o"     'hydra-greek/body)
    (key-chord-define-global "0p"     'hydra-calendar/body)
    (key-chord-define-global "qa"     'org-ref-bibtex-hydra/body)
    (key-chord-define-global "ws"     'hydra-pdftools/body)
    (key-chord-define-global "tg"     'help/hydra/timestamp/body)
    (key-chord-define-global "ed"     'hydra-macron/body)
    (key-chord-define-global "-["     'hydra-dash/body)
(let* (
    (glyph-en-dash (make-glyph-code ?\u2013 'font-lock-keyword-face))
    (glyph-em-dash (make-glyph-code ?\u2014 'font-lock-function-name-face)) )
  (when (not buffer-display-table)
    (setq buffer-display-table (make-display-table)))
  (aset buffer-display-table 8211 `[,glyph-en-dash])
  (aset buffer-display-table 8212 `[,glyph-em-dash]))

#+end_src

#+RESULTS:
:RESULTS:
[247472148]
:END:
