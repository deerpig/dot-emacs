#+TITLE:Dot Emacs: Hydra
#+AUTHOR: Brad Collins
#+EMAIL: brad@chenla.la
#+PROPERTY: tangle emacs-packages.el

* Introduction

There are a number of different ways of adding packages to Emacs, each
method is a built on top another.  It isn't a bad idea to take  a
minute to look at how we got to where we are today.

** Primordial Software Management

Install by hand.  Until just a few years ago this was the only way to
add things to emacs.  You put your code in a directory relative to
'.emacs-lisp' or '.emacs.d' directories and then add the path to that
directory in your init file and then either 'require' or 'load' the
package.  It was up to you to keep track of and update any of this
code.  It was good for a very long time, because deep down we all love
tweaking our init files.  And then one day it wasn't.  

** The First Coming: The Age of Packages Begins

In Emacs 2X.X all of that changed when Emacs got a proper Packaging
system.  The world would never be quiet the same again. Packages work
very much the same as apt-get or yum packages in linux.  Packages are,
/well packaged/ and maintained in ELPA and MELPA repositories.  This
makes installation, and upgrading a trivial process using the /Emacs
Package Manager/.  The package manager really is fantastic, especially
for people new to Emacs.  But as in all things, if you make something
friendly and easy to use for beginners it is almost inevitable that it
takes away some features and control that experts require.  The
package manager is the /customize/ method of installing packages.

** The Second Coming: The Great Conciliation

If you have a large hand written init file, it would be far more
consistent to be able to bipass the package manager and install from
your init file which bundles together installation, updating and all
configuration and tweakages.

Enter 'use-package' a lisp-macro from John Weigley which does
everything hardcore emacs tweakers needed and more.  It leveraged the
power of emacs packages inside the comforting monstrocity that is the
average hand-written emacs init file.

** The Rapture: Is there a Rapture?  

What's next, is there a /rapture/ or at at least a Singularity we can
look forward to?  These things are unknown.  However we would be
remiss to not mention what is likely the embryonic seed from which the
Singularity will emerge from, and that of course is Orgmode and Org
Babel and how it has made possible both Literate Programing and
Literate Computing...

** How Use-Package Works

* Packages
:PROPERTIES:
:tangle: emacs-packages.el
:END:

** File Header 

#+begin_src emacs-lisp
;; -*- mode: EMACS-LISP; fill-column: 75; comment-column: 50; -*-
;; Use-Package
#+end_src

** Unicode Fonts

We use the `unicode-fonts' package to set everything up. Beware that
the `unicode-fonts-setup' function takes a while to run, which is why
this module isn't always on by default.

You'll need to make sure the necessary fonts are installed for this to
work. See https://github.com/rolandwalker/unicode-fonts/#quickstart

#+begin_src emacs-lisp

;; Unicode Fonts ===========================================

(use-package unicode-fonts
  :ensure t
  :config
  (unicode-fonts-setup))

#+end_src


** Color Theme: Gruvbox

Emacs packages provided a nice way to add color schemes to Emacs.
Previously there was a theme manager application which bundled a lot
of themes together and provided an interface to choose one.

[[https://github.com/greduan/emacs-theme-gruvbox][Gruvbox Theme]] is one of the new generation of emacs color themes
designed to work equally well in terminal windows as they do in X11.
There is obviously a great deal of love lavished on these themes and
all of the hard work that went into them has paid off.  Modern emacs
is far more than an editor, and these themes cover the base editor and
add-on packages including Helm, Mu4e etc.

I had been a holdout for a number of years, clinging to the theme I'd 
been using for nearly a decade; 'calm-forest'.  There are still a few
things in Gruvbox that I thought worked better in calm-forest, but all
in all this theme is really fucking good.  YMMV.

#+begin_src emacs-lisp

;; Gruvbox Theme ===========================================
;; https://github.com/greduan/emacs-theme-gruvbox

(use-package gruvbox-theme
  :ensure t
  :config
  (load-theme 'gruvbox t))

#+end_src

** Winmove

#+begin_src emacs-lisp

;; Winmove =================================================

(use-package windmove
  ;; :defer 4
  :ensure t
  :config
  ;; use command key on Mac
  ;;(windmove-default-keybindings 'hyper)
  ;; wrap around at edges
  (setq windmove-wrap-around t))

#+end_src

** Avy Jump Mode

#+begin_src emacs-lisp

;; Avy Jump Mode ===========================================

(use-package avy
  :ensure t
  :config
  (setq avy-all-windows 'all-frames)
  (global-set-key (kbd "C-,") 'avy-goto-char-2)
  (global-set-key (kbd "C-.") 'avy-goto-word-1))

#+end_src

** UUID Generators

See [[rfc:4122][RFC4122]]

M-x uuidgen inserts a uuid -- but I haven't worked out how to call
this programically -- for now just doing it using (org-new-id)


#+begin_src emacs-lisp
;; UUID Generators =========================================
;; See [[rfc:4122][RFC4122]]
;; M-x uuidgen inserts a uuid -- but I haven't worked out
;; how to call this programically -- for now just doing it
;; using (org-new-id)

(use-package uuidgen
  :ensure t
  )

#+end_src

** WC-Org

Displays word count in modeline of org buffers.

Can be customized using `defcustom wc-linemode-format'

See http://ireal.blog/?p=6722


#+begin_src emacs-lisp

;; WC-Org ==================================================
;; (add-hook 'org-mode-hook 'wc-mode)
;; Displays word count in modeline of org buffers.
;; Can be customized using `defcustom wc-linemode-format'
;; See http://ireal.blog/?p=6722

(use-package wc-mode
  :ensure t
  )

#+end_src


** Powerline

Powerline can be thought of as eye-candy, but it's very nice eye-candy
that (at least for me) makes the command line far more readable.  I
remember when I first installed it, before packages, and it took me
almost a whole day to get it to work.  Now it's just three lines of
config...

#+begin_src emacs-lisp

;; Powerline ===============================================
(use-package powerline
  :ensure t
  :init
  (powerline-default-theme)
  (setq powerline-color1 "#C05800")
  (setq powerline-color2 "#839496")
  (setq powerline-arrow-shape 'arrow))

#+end_src

** eShell

I am one of those people who admire eshell and yet have never gotten
into the habit of using it on a regular basis. I now use [[https://github.com/Guake/guake][Guake]]
pulldown terminal emulator outside of emacs.

I think once I start using tramp more in my workflow for managing
servers I will start to use eShell more.  But for now...

When I do start to use eShell in earnest, these links are a good place
to start:

 - [[http://cestlaz.github.io/posts/using-emacs-27-shell/#.WKFrkbMxVph][Using Emacs - 27 - shell and eshell]] | C'est la Z
 - [[https://www.masteringemacs.org/article/complete-guide-mastering-eshell][Mastering Eshell]] Mastering Emacs

#+begin_src emacs-lisp

;; eshell ===================================================
(use-package eshell-git-prompt
  :ensure t
  :config
  (eshell-git-prompt-use-theme 'robbyrussell))

;; Define a keybinding to get to your eshell quickly.
(global-set-key (kbd "C-c e") 'eshell)

;; Visual commands are commands which require a proper terminal.
;; eshell will run them in a term buffer when you invoke them.
(setq eshell-visual-commands
      '("less" "tmux" "htop" "top" "bash" "zsh" "fish"))
(setq eshell-visual-subcommands
      '(("git" "log" "l" "diff" "show")))

#+end_src

** EMMS

EMMS is the Emacs Multi-Media System.  EMMS has been around a while
and is still in active development.  I've played with it a couple of
times, but it doesn't seem to be to handle very large media
collections like mine.  My music alone is nearly two terrabytes.

Every other year or so, I stumble across it and try it again.  At the
moment it doesn't fit my needs so it's commented out until next time.

Good places to start, when /playing/ around with it:

  - [[https://www.gnu.org/software/emms/][Emacs Multimedia System]] | EMMS Home on gnu.org
  - [[https://www.emacswiki.org/emacs/EMMS][EMMS]] | Emacs Wiki

#+begin_src emacs-lisp

;; emms ====================================================

;;(use-package emms
;;  :ensure t
;;  :config
;;  (progn
;;    (emms-standard)
;;    (emms-default-players)
;;    (setq emms-playlist-buffer-name "Music-EMMS")
;;    (setq emms-source-file-default-directory "/media/deerpig/green/music")))

#+end_src

** HELM Related Packages

Helm will have a whole file dedicated to helm stuff.  When I first
started this file, I wanted a place to put helm packages that were
installed using use-package.

Helm seems to be one of the few packages that is so complex and
interconnected with everything else that a lot of config is difficult
to get to work within use-package,

The packages included here will be moved to that file when I take the
plunge.

#+begin_src emacs-lisp
;; HELM ====================================================
#+end_src

** Helm Unicode

#+begin_src emacs-lisp

;; Helm-unicode --------------------------------------------
;; to use, M-x helm-unicode and type name of unicode character
;; (in caps?).
 (use-package helm-unicode
   :ensure t
   )

#+end_src

** Helm Bibltex


#+begin_src emacs-lisp

;; Helm-bibtex ---------------------------------------------

;;"~/org/ref.bib"

(use-package helm-bibtex
  :ensure t
  :init
  (autoload 'helm-bibtex "helm-bibtex" "" t)
  (setq bibtex-completion-bibliography '("~/org/biblio.bib" "~/org/ref.org"))
  (setq bibtex-completion-pdf-field "file")
  ;;(setq bibtex-completion-additional-search-fields '(keywords))
  (setq bibtex-completion-pdf-symbol "⌘")
  (setq bibtex-completion-notes-symbol "✎")
  (setq bibtex-completion-pdf-open-function
	(lambda (fpath)
	  (call-process "okular" nil 0 nil fpath)))
  (setq bibtex-completion-notes-path "~/org/bibnotes.org")
  (setq bibtex-completion-additional-search-fields '(tags))
  )

#+end_src


** Org Ref

Org-Ref is nothing short of mindblowing!  

#+begin_quote
org-ref: citations, cross-references, indexes, glossaries and bibtex
utilities for org-mode
#+end_quote

And yet I'm not using it... yet.  But I have a good excuse :)

References are an important part of what we will integrate into BMF.
At present I maintain a BibTex database like many other scholars and
scientists.  But my next step will be to convert the BibTex database
into a literate BibTex database -- where each reference will be a
separate heading and include a lot more information than you can
presently keep inside BibTex.  The idea is to then tangle the file so
that a traditional BibTex database is generated.  That's not
difficult, but I am still not sure how this will interact with Org-Ref
which is very much based on the BibTex textfile database world.  There
are so many cool lookup tools in Org-Ref that I want to work out how
to be able to add references from Org-Ref and still have a primary
reference database that will be using BMF Literate References.

So until I can set aside a block of time to tackle this, it will
remain commented out :(

When I do tackle it, this is where to begin:

  - [[https://github.com/jkitchin/org-ref][Org-Ref]] | jkitchin GitHub
  - [[https://www.youtube.com/watch?v=2t925KRBbFc][Org Ref]] | YouTube

#+begin_src emacs-lisp

;; Org-Ref =================================================
;; 
;; Org-ref is for interactively adding references to org documents
;; as they are being composed and exported.

;; (use-package org-ref
;;   :ensure t
;;   :config
;;   (setq reftex-default-bibliography '("~/org/biblio.bib"))
;;   (setq org-ref-ref-library 'org-ref-helm-cite)
  
;;   (setq org-ref-bibliography-notes    "~/org/biblio.bib"
;; 	org-ref-default-bibliography  "~/org/bibtex-pdfs"
;; 	org-ref-pdf-directory         "~/htdocs/lib")

;;   (setq bibtex-completion-bibliography "~/org/biblio.bib"
;; 	bibtex-completion-library-path "~/htdocs/lib"
;; 	bibtex-completion-notes-path   "~/org")
  
  ;; open pdf with system pdf viewer (works on mac)
  ;; (setq bibtex-completion-pdf-open-function
  ;; 	(lambda (fpath)
  ;; 	  (start-process "open" "*open*" "open" fpath)))
;;  )

#+end_src

** 

;; Org-wiki ================================================

;; (use-package org-wiki
;;   :ensure t
;;   :init
;;   )

;; https://github.com/caiorss/org-wiki

 ;; (let ((url "https://raw.githubusercontent.com/caiorss/org-wiki/master/org-wiki.el"))     
 ;;       (with-current-buffer (url-retrieve-synchronously url)
 ;; 	(goto-char (point-min))
 ;; 	(re-search-forward "^$")
 ;; 	(delete-region (point) (point-min))
 ;; 	(kill-whole-line)
 ;; 	(package-install-from-buffer)))


;; helm-dictionary -----------------------------------------

;; (use-package helm-dictionary
;;    :ensure t
;;    )

;; helm-wordnet ---------------------------------------------
;; requires local install of wordnet

 (use-package helm-wordnet
   :ensure t
   )

;; helm-recoll ----------------------------------------------
 ;; (use-package helm-recoll
 ;;   :ensure t
 ;;   :config
 ;;   (helm-recoll-create-source "org" "~/.recoll/org")
 ;;   (helm :sources '(helm-source-recoll-org))
 ;;   (helm-recoll-create-source "proj" "~/.recoll/proj")
 ;;   (helm :sources '(helm-source-recoll-proj))
 ;;   (helm-recoll-create-source "doc" "~/.recoll/doc")
 ;;   (helm :sources '(helm-source-recoll-doc)))

;; 
;; https://github.com/emacs-helm/helm-recoll
;; Open file using external program using C-c C-x

(use-package helm-recoll
  :commands helm-recoll
  :init (setq helm-recoll-directories
	      '(("org"  . "~/.recoll/org")
		("proj" . "~/.recoll/proj")
		("doc"  . "~/.recoll/doc"))))

;; Helm Dash -----------------------------------------------
(use-package helm-dash
  :ensure t
  :init
  (setq helm-dash-docsets-path "~/.docsets")
  (setq helm-dash-common-docsets
	  '("Bootstrap 3" "Jekyll" "Font_Awesome"
	    "HTML" "CSS" "LaTeX" "Chef" "Vagrant" "Docker"
	    "R" "Python 2" "Python 3" "SciPy" "Ruby"
	    "Common Lisp" "Emacs Lisp" "Racket"
	    "Bash" "Apache_HTTP_Server"))
)

;; Helm Swoop ----------------------------------------------

(use-package helm-swoop  
  :ensure t
  :config
  ;; keybindings
  (global-set-key (kbd "C-M-,") 'helm-swoop)
  (global-set-key (kbd "C-M-.") 'helm-multi-swoop-all)
  ;; isearch uses to helm-swoop
  (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
  ;; From helm-swoop to helm-multi-swoop-all
  (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)
  ;; Save buffer when helm-multi-swoop-edit complete
  (setq helm-multi-swoop-edit-save t)
  ;; If this value is t, split window inside the current window
  (setq helm-swoop-split-with-multiple-windows nil)
  ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
  (setq helm-swoop-split-direction 'split-window-horizontally)
  ;; If nil, you can slightly boost invoke speed in exchange for text color
  (setq helm-swoop-speed-or-color t)
  ;; Locate unix command used
  (setq helm-locate-command "locate %s -e -A --regex %s"))



;; SSH =====================================================

;; may or may not help emacs not prompt for ssh key passphrases

(use-package exec-path-from-shell
  :ensure t
  :config
  (exec-path-from-shell-copy-env "SSH_AGENT_PID")
  (exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))

;; GIT =====================================================
(use-package magit
  :ensure t
  :bind
  ("C-x g" . magit-status)
  ("C-x M-g" . magit-dispatch-popup))


;; Git-Gutter ===============================================
;; :home: https://github.com/syohex/emacs-git-gutter
(use-package git-gutter
  :ensure t
  :config
  ;; use globally
  (global-git-gutter-mode +1)
  ;; add hook if you want to only use for specific modes
  (add-hook 'ruby-mode-hook 'git-gutter-mode)
  (add-hook 'python-mode-hook 'git-gutter-mode))

;; Magithub ================================================
;; SEE: http://jr0cket.co.uk/2017/02/spacemacs-using-magit-with-github.html
;;
;; requires installation of hub, see: https://hub.github.com/
;; which I'm not quite ready to do.

;; (use-package magithub
;;   :ensure t
;;   :after magit
;;   :config (magithub-feature-autoinject t))

;; YASNIPPET ================================================

;; clone AndreaCrotti's yasnippet collection:
;; https://github.com/AndreaCrotti/yasnippet-snippets.git I put the
;; directories under the ~/.dotfiles/emacs.d/ directory so that
;; snippets are kept in sync between boxes.  yasmate snippets end in
;; an underscore -- so in an org file, dot_ and then <TAB> will insert
;; the snippets.  Install all custom snippets into the snippets
;; directory when you hit C-c C-c when you create a new snippet and
;; then run M-x yas-reload-all.  M-x yasnippet-describe-tables will
;; show available snippets for the mode you are in.

(use-package yasnippet
  :ensure t
  :init
  (yas-global-mode 1)
  :config
  (add-to-list 'yas-snippet-dirs "~/.dotfiles/emacs.d/yasnippets/snippets")
  (add-to-list 'yas-snippet-dirs "~/.dotfiles/emacs.d/yasnippets/yasmate")
  (add-to-list 'yas-snippet-dirs "~/.dotfiles/emacs.d/yasnippets/bootstrap")
  (setq warning-suppress-types '(yasnippet backquote-change))
  ;;(add-to-list 'warning-suppress-types '(yasnippet backquote-change))
  (yas-reload-all)
  ;;(define-key yas-minor-mode-map (kbd "<tab>") 'yas-expand)
  ;;(define-key yas-minor-mode-map (kbd "TAB") 'yas-expand)
  )

;; Helm Yasnippet ------------------------------------------
(use-package helm-c-yasnippet
  :ensure t
  :config
  (global-set-key (kbd "C-c y") 'helm-yas-complete))

;; Dired Ranger ============================================

; In a dired buffer, mark multiple files and then hit W to copy them.  Go
; to another directory and mark more files and hit C-u W to add Now go to
; the target directory and hit X to move to or Y to copy the files to the
; target

(use-package dired-ranger
  :ensure t
  :bind (:map dired-mode-map
              ("W" . dired-ranger-copy)
              ("X" . dired-ranger-move)
              ("Y" . dired-ranger-paste)))

;; PHP =====================================================
(use-package php-mode
  :ensure t
  )

;; Ruby ====================================================
(use-package ruby-mode
  :ensure t
  :mode "\\.rb\\'"
  :interpreter "ruby")

;; Python ==================================================
(use-package python-mode
  :ensure t)

;; Dictionaries and Word Definitions =======================

;; Define Word 
;; looks up definition online in word-nik
;; (use-package define-word
;;   :ensure t
;;   )
 (use-package dictionary
   :ensure t
   )


;; Boxquote =================================================
(use-package boxquote
  :ensure t )
;; Lorem ipsum ==============================================
(use-package lorem-ipsum
  :ensure t)

;; Twittering ===============================================
  (use-package twittering-mode
  :ensure t
  :config
  (setq twittering-use-master-password t)
  (setq twittering-icon-mode t)         ; Show icons
  (setq twittering-timer-interval 300)  ; Update timeline each 300 seconds
  (setq twittering-url-show-status nil) ; Keeps the echo area from
 				        ; showing all the http processes
  )

;; elfeed ==================================================

(use-package elfeed
  :ensure t
  :bind
  (("C-x w" . elfeed))
  :init
  (setq elfeed-feeds
	'(("http://planet.emacsen.org/atom.xml" emacs)
	  ("http://feeds.arstechnica.com/arstechnica/index/" tech ars)
	  ("http://kk.org/cooltools/feed" tools)
	  ("http://xkcd.com/rss.xml" comic)
	  ("http://www.boingboing.net/atom.xml" tech boing)
	  ("http://sceper.ws/feed/" torrent)
	  ("http://feeds.feedburner.com/longnow" 10k longnow)
	  ("http://rss.slashdot.org/Slashdot/slashdotMain" tech slash))))

(use-package elfeed-goodies
  :ensure t
  :init
  (setq elfeed-goodies/entry-pane-position (quote bottom))
  :config
  (elfeed-goodies/setup))


;; Color Themes ============================================

;; to choose a theme interactively -- M-x color-theme-select
(use-package color-theme
  :ensure t
  )

;; HTML, XML & CSS =========================================

;; nXML Mode should be now part of emacs

;; HTML Tidy 
(use-package tidy
  :ensure t
  )

;; RelaxNG Mode 
(use-package rnc-mode
  :ensure t
  )

;; Htmlize
(use-package htmlize
  :ensure t
  )

;; Web-Mode
;;
;; Replacement for html mode.
;;
;; See:
;; :url: http://web-mode.org/ ;; home page
;; :url: http://cestlaz.github.io/posts/using-emacs-21-web-mode/#.WC0t1LMxVhF
(use-package web-mode
    :ensure t
    :config
	 (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
	 (setq web-mode-engines-alist
	       '(("django"    . "\\.html\\'"))) ;; use for liquid (jekyll)
	 (setq web-mode-ac-sources-alist
	       '(("css" . (ac-source-css-property))
		 ("html" . (ac-source-words-in-buffer ac-source-abbrev))))

(setq web-mode-enable-auto-closing t)
(setq web-mode-enable-auto-quoting t))

;; CSV Mode ================================================
(use-package csv-mode
  :ensure t
  )

;; Lisp & Scheme ===========================================

;; Quack
(use-package quack
  :ensure t
  )

;; Slime
(use-package slime
  :ensure t
  :init
  (setq inferior-lisp-program "/opt/sbcl/bin/sbcl")
  (setq slime-contribs '(slime-fancy))
  )

;; Picolisp
(use-package picolisp-mode
  :ensure t
  )

;; CSS =====================================================
;;Rainbow mode 
(use-package rainbow-mode
  :ensure t
  :config
   (autoload 'rainbow-mode "rainbow" nil t nil)
   (add-hook 'css-mode-hook
	     (lambda ()
	       (rainbow-mode 1)))
  )

;; CSS Mode 
(use-package css-mode
  :ensure t
  :init
  (defalias 'apropos-macrop 'macrop)
  (autoload 'css-mode "css-mode")
  (setq auto-mode-alist       
    (cons '("\\.css\\'" . css-mode) auto-mode-alist))
  )

;; findr ===================================================
(use-package findr
  :ensure t
  )
;; wwtime ==================================================
(use-package wwtime
  :ensure t
  )
;; JSON ====================================================
(use-package json
  :ensure t
  )

;; Chef & Cucumber =========================================

;; Chef
(use-package chef-mode
  :ensure t
  )
;; Cucumber (edit .feature files)
(use-package feature-mode
  :ensure t)

;; Emacs Lisp Development ==================================

;; Cask (project package management for elisp)
(use-package cask
  :ensure t
  )

;; Ecukes (cucumber like tests for elisp)
(use-package ecukes
  :ensure t
  )

