#   -*- mode: org; fill-column: 60 -*-

#+TITLE: Packages  | Deerpig's Dot Emacs
#+AUTHOR: Brad Collins
#+EMAIL: brad@chenla.la
#+STARTUP: showall
#+TOC: headlines 4
#+PROPERTY: header-args    :results drawer  :tangle emacs-packages.el
:PROPERTIES:
:CUSTOM_ID: 
:Name:      /home/deerpig/proj/deerpig/dot-emacs/dot-packages.org
:Created:   2017-07-02T18:06@Prek Leap (11.642600N-104.919210W)
:ID:        3af7d95c-65f4-45bb-8795-278aba9a7cce
:VER:       552265683.115872395
:GEO:       48P-491193-1287029-15
:BXID:      pig:VYK2-0224
:Class:     dotemacs
:Type:      literate-program
:Status:    wip
:Licence:   MIT/CC BY-SA 4.0
:END:

[[https://img.shields.io/badge/made%20by-Deerpig-999999.svg?style=flat-square]] 
[[https://img.shields.io/badge/class-dotemacs-0072B2.svg?style=flat-square]]
[[https://img.shields.io/badge/type-literate%20program-0072B2.svg?style=flat-square]]
[[https://img.shields.io/badge/status-wip-D55E00.svg?style=flat-square]]
[[https://img.shields.io/badge/licence-MIT%2FCC%20BY--SA%204.0-000000.svg?style=flat-square]]

* Introduction

There are a number of different ways of adding packages to Emacs, each
method is a built on top another.  It isn't a bad idea to take  a
minute to look at how we got to where we are today.

** Primordial Software Management

Install by hand.  Until just a few years ago this was the only way to
add things to emacs.  You put your code in a directory relative to
'.emacs-lisp' or '.emacs.d' directories and then add the path to that
directory in your init file and then either 'require' or 'load' the
package.  It was up to you to keep track of and update any of this
code.  It was good for a very long time, because deep down we all love
tweaking our init files.  And then one day it wasn't.  

** The First Coming: The Age of Packages Begins

In Emacs 2X.X all of that changed when Emacs got a proper Packaging
system.  The world would never be quiet the same again. Packages work
very much the same as apt-get or yum packages in linux.  Packages are,
/well packaged/ and maintained in ELPA and MELPA repositories.  This
makes installation, and upgrading a trivial process using the /Emacs
Package Manager/.  The package manager really is fantastic, especially
for people new to Emacs.  But as in all things, if you make something
friendly and easy to use for beginners it is almost inevitable that it
takes away some features and control that experts require.  The
package manager is the /customize/ method of installing packages.

** The Second Coming: The Great Conciliation

If you have a large hand written init file, it would be far more
consistent to be able to bipass the package manager and install from
your init file which bundles together installation, updating and all
configuration and tweakages.

Enter 'use-package' a lisp-macro from John Weigley which does
everything hardcore emacs tweakers needed and more.  It leveraged the
power of emacs packages inside the comforting monstrocity that is the
average hand-written emacs init file.

** The Rapture: Is there a Rapture?  

What's next, is there a /rapture/ or at at least a Singularity we can
look forward to?  These things are unknown.  However we would be
remiss to not mention what is likely the embryonic seed from which the
Singularity will emerge from, and that of course is Orgmode and Org
Babel and how it has made possible both Literate Programing and
Literate Computing...

** How Use-Package Works

* Packages
** File Header 
:PROPERTIES:
:ID:       5c452ffb-2cb8-4556-8c63-df447db69ed1
:END:

#+begin_src emacs-lisp
;; -*- mode: EMACS-LISP; fill-column: 75; comment-column: 50; -*-
;; Use-Package
#+end_src

** Unicode Fonts
:PROPERTIES:
:ID:       92bef879-4601-4f50-9089-952aed56f3cb
:END:

We use the `unicode-fonts' package to set everything up. Beware that
the `unicode-fonts-setup' function takes a while to run, which is why
this module isn't always on by default.

You'll need to make sure the necessary fonts are installed for this to
work. See https://github.com/rolandwalker/unicode-fonts/#quickstart

#+begin_src emacs-lisp

;; Unicode Fonts ===========================================

(use-package unicode-fonts
  :ensure t
  :config
  (unicode-fonts-setup))

#+end_src


** Color Theme: Gruvbox
:PROPERTIES:
:ID:       7953bec4-274c-4c4c-a9fa-1f28cb99b55c
:END:

Emacs packages provided a nice way to add color schemes to Emacs.
Previously there was a theme manager application which bundled a lot
of themes together and provided an interface to choose one.

[[https://github.com/greduan/emacs-theme-gruvbox][Gruvbox Theme]] is one of the new generation of emacs color themes
designed to work equally well in terminal windows as they do in X11.
There is obviously a great deal of love lavished on these themes and
all of the hard work that went into them has paid off.  Modern emacs
is far more than an editor, and these themes cover the base editor and
add-on packages including Helm, Mu4e etc.

I had been a holdout for a number of years, clinging to the theme I'd 
been using for nearly a decade; 'calm-forest'.  There are still a few
things in Gruvbox that I thought worked better in calm-forest, but all
in all this theme is really fucking good.  YMMV.

#+begin_src emacs-lisp

;; Gruvbox Theme ===========================================
;; https://github.com/greduan/emacs-theme-gruvbox

(use-package gruvbox-theme
  :ensure t
  :config
  (load-theme 'gruvbox t))

#+end_src


** Set Some Faces
:PROPERTIES:
:ID:       3b16868d-1cfb-4f87-a126-18152d00e768
:END:

#+begin_src emacs-lisp
;; remove the strange white line between two fringes.
(set-face-attribute 'vertical-border nil :foreground (face-attribute 'fringe :background))
#+end_src


** EXWM
:PROPERTIES:
:ID:       1ed6a925-5e2c-4118-a90a-3bec65d79891
:END:

#+begin_src emacs-lisp
(use-package exwm :ensure t
    :config 
    (use-package exwm-config
        :config (exwm-config-default)))

#+end_src

** Winmove
:PROPERTIES:
:ID:       a19fa59c-d130-4d07-9344-78e7df23c6dc
:END:

Use hydra for key-bindings

#+begin_src emacs-lisp

;; Winmove =================================================

(use-package windmove
  ;; :defer 4
  :ensure t
  :config
  ;; use command key on Mac
  ;;(windmove-default-keybindings 'hyper)
  ;; wrap around at edges
  (setq windmove-wrap-around t))

#+end_src


** Buffer Move
:PROPERTIES:
:ID:       c1bc6e2a-d772-40f9-b614-d424218ca4f6
:END:

 - [[https://github.com/lukhas/buffer-move][lukhas/buffer-move]] | GitHub

Use hydra for key-bindings

#+begin_src emacs-lisp

;; Buffer Move =============================================

(use-package buffer-move
  :ensure t
  :config
  )
#+end_src


** Avy Jump Mode
:PROPERTIES:
:ID:       abf3134e-8884-43a5-935d-c5e33bf9943b
:END:

#+begin_src emacs-lisp

;; Avy Jump Mode ===========================================

(use-package avy
  :ensure t
  :config
  (setq avy-all-windows 'all-frames)
  (global-set-key (kbd "C-,") 'avy-goto-char-2)
  (global-set-key (kbd "C-.") 'avy-goto-word-1))

#+end_src

** UUID Generators
:PROPERTIES:
:ID:       e9aa7b87-260a-4985-ac4c-c938e24e5010
:END:

See [[rfc:4122][RFC4122]]

M-x uuidgen inserts a uuid -- but I haven't worked out how to call
this programically -- for now just doing it using (org-new-id)


#+begin_src emacs-lisp
;; UUID Generators =========================================
;; See [[rfc:4122][RFC4122]]
;; M-x uuidgen inserts a uuid -- but I haven't worked out
;; how to call this programically -- for now just doing it
;; using (org-new-id)

(use-package uuidgen
  :ensure t
  )

#+end_src


** Powerline
:PROPERTIES:
:ID:       9db01df2-8b67-472f-819a-bc18809a362f
:END:

I've switched to Spaceline and this section will be deleted soon.

Powerline can be thought of as eye-candy, but it's very nice eye-candy
that (at least for me) makes the command line far more readable.  I
remember when I first installed it, before packages, and it took me
almost a whole day to get it to work.  Now it's just three lines of
config...

#+begin_src emacs-lisp

  ;; Powerline ===============================================
  ;; (use-package powerline
  ;;   :ensure t
  ;;   :init
  ;;   (powerline-default-theme)
  ;;   (setq powerline-color1 "#C05800")
  ;;   (setq powerline-color2 "#839496")
  ;;   (setq powerline-arrow-shape 'arrow))

#+end_src

** Spaceline
:PROPERTIES:
:ID:       7b9ec49b-f6ce-4f34-b349-a10988e7b1ba
:END:


Powerline was getting more than a bit long in the tooth and
wasn't playing nice with a lot of my config.  Spaceline
seems to be everything powerline was and a lot more.  Very
good integration with eyebrowse and helm, which are both
very near and dear to my heart.

 - [[https://github.com/TheBB/spaceline][TheBB/spaceline: Powerline theme from Spacemacs]]
 - [[http://pragmaticemacs.com/emacs/get-that-spacemacs-look-without-spacemacs/][Get that spacemacs look without spacemacs]] | Pragmatic Emacs
 - [[http://amitp.blogspot.com/2017/01/emacs-spaceline-mode-line.html][Amit's Thoughts: Emacs spaceline mode line]]

#+begin_src emacs-lisp
;;; Spaceline ----------------------------------------------

(use-package spaceline
  :ensure t
  :init
  (setq powerline-default-separator 'wave)
  :config
  (require 'spaceline-config)
  (setq spaceline-workspace-numbers-unicode t)
  (setq spaceline-window-numbers-unicode t)
  (spaceline-helm-mode 1)
  (spaceline-spacemacs-theme))
#+end_src


** Projectile and Helm Projectile
:PROPERTIES:
:ID:       c644613d-72ad-4b6d-9e2a-dff4ca93b077
:END:

 - [[http://cestlaz.github.io/posts/using-emacs-33-projectile-jump/#.Wchi9qsxVpg][Using Emacs - 33 - projectile, dumb-jump]] | C'est la Z
 - [[https://github.com/bbatsov/projectile/blob/master/README.md][bbatsov/projectile]] | GitHub


#+begin_src emacs-lisp
;;; Projectile ---------------------------------------------

(use-package projectile
  :ensure t
  :init
  (setq-default projectile-keymap-prefix (kbd "H-,"))
  :config
  (projectile-global-mode)
  (setq projectile-completion-system 'helm))

;;; Helm Projectile ----------------------------------------

(use-package helm-projectile
  :ensure t
  :config
  (helm-projectile-on))

#+end_src

** eShell
:PROPERTIES:
:ID:       29e92d29-98d4-446c-a02c-1b855584cbf2
:END:

I am one of those people who admire eshell and yet have never gotten
into the habit of using it on a regular basis. I now use [[https://github.com/Guake/guake][Guake]]
pulldown terminal emulator outside of emacs.

I think once I start using tramp more in my workflow for managing
servers I will start to use eShell more.  But for now...

When I do start to use eShell in earnest, these links are a good place
to start:

 - [[http://cestlaz.github.io/posts/using-emacs-27-shell/#.WKFrkbMxVph][Using Emacs - 27 - shell and eshell]] | C'est la Z
 - [[https://www.masteringemacs.org/article/complete-guide-mastering-eshell][Mastering Eshell]] Mastering Emacs

#+begin_src emacs-lisp

;; eshell ===================================================
(use-package eshell-git-prompt
  :ensure t
  :config
  (eshell-git-prompt-use-theme 'robbyrussell))

;; Define a keybinding to get to your eshell quickly.
(global-set-key (kbd "C-c e") 'eshell)

;; Visual commands are commands which require a proper terminal.
;; eshell will run them in a term buffer when you invoke them.
(setq eshell-visual-commands
      '("less" "tmux" "htop" "top" "bash" "zsh" "fish"))
(setq eshell-visual-subcommands
      '(("git" "log" "l" "diff" "show")))

#+end_src


** Tramp
:PROPERTIES:
:ID:       a0b4ba0b-c294-459d-a9da-7c7122ad8739
:END:

This allows you to use tramp to open files on remote hosts
using the sudo command:  so =/sudo:host:/etc/hosts= should
now work.

#+begin_src emacs-lisp
(add-to-list 'tramp-default-proxies-alist
                   '(nil "\\`root\\'" "/ssh:%h:"))
      (add-to-list 'tramp-default-proxies-alist
                   '((regexp-quote (system-name)) nil nil))
#+end_src


** EMMS
:PROPERTIES:
:ID:       077cbd7e-2600-44bf-86c7-56933a0c55a3
:END:

EMMS is the Emacs Multi-Media System.  EMMS has been around a while
and is still in active development.  I've played with it a couple of
times, but it doesn't seem to be to handle very large media
collections like mine.  My music alone is nearly two terrabytes.

Every other year or so, I stumble across it and try it again.  At the
moment it doesn't fit my needs so it's commented out until next time.

Good places to start, when /playing/ around with it:

  - [[https://www.gnu.org/software/emms/][Emacs Multimedia System]] | EMMS Home on gnu.org
  - [[https://www.emacswiki.org/emacs/EMMS][EMMS]] | Emacs Wiki

#+begin_src emacs-lisp

;; emms ====================================================

;;(use-package emms
;;  :ensure t
;;  :config
;;  (progn
;;    (emms-standard)
;;    (emms-default-players)
;;    (setq emms-playlist-buffer-name "Music-EMMS")
;;    (setq emms-source-file-default-directory "/media/deerpig/green/music")))

#+end_src

** WC-Org
:PROPERTIES:
:ID:       addc0ceb-4923-478a-aefa-2fd200e8abaf
:END:

Displays word count in modeline of org buffers.

Can be customized using `defcustom wc-linemode-format'

See http://ireal.blog/?p=6722


#+begin_src emacs-lisp

;; WC-Org ==================================================
;; (add-hook 'org-mode-hook 'wc-mode)
;; Displays word count in modeline of org buffers.
;; Can be customized using `defcustom wc-linemode-format'
;; See http://ireal.blog/?p=6722

(use-package wc-mode
  :ensure t
  )

#+end_src

** Org Wiki

;; Org-wiki ================================================

;; (use-package org-wiki
;;   :ensure t
;;   :init
;;   )

;; https://github.com/caiorss/org-wiki

 ;; (let ((url "https://raw.githubusercontent.com/caiorss/org-wiki/master/org-wiki.el"))     
 ;;       (with-current-buffer (url-retrieve-synchronously url)
 ;; 	(goto-char (point-min))
 ;; 	(re-search-forward "^$")
 ;; 	(delete-region (point) (point-min))
 ;; 	(kill-whole-line)
 ;; 	(package-install-from-buffer)))


** Org Ref
:PROPERTIES:
:ID:       b48c80ce-d8fb-49ea-82fe-983b4880d9a4
:END:

Org-Ref is nothing short of mindblowing!  

#+begin_quote
org-ref: citations, cross-references, indexes, glossaries and bibtex
utilities for org-mode
#+end_quote


Where to begin:

  - [[https://github.com/jkitchin/org-ref][Org-Ref]] | jkitchin GitHub
  - [[https://www.youtube.com/watch?v=2t925KRBbFc][Org Ref]] | YouTube
  - [[Https://www.reddit.com/r/emacs/comments/4gudyw/help_me_with_my_orgmode_workflow_for_notetaking/][Org-mode workflow for taking notes]] | Stack Exchange


#+begin_src emacs-lisp

  ;; Org-Ref =================================================

  ;; Org-ref is for interactively adding references to org documents
  ;; as they are being composed and exported.

  (use-package org-ref
    :ensure t
    :init 
     (require 'org-ref-pdf)
     (require 'org-ref-latex)
     (require 'org-ref-url-utils)
    :config
    (setq reftex-default-bibliography '("~/proj/chenla/hoard/bib.bib"))
    (setq org-ref-ref-library 'org-ref-helm-cite)

    (setq org-ref-notes-directory       "~/proj/chenla/hoard/"
          org-ref-bibliography-notes    "~/proj/chenla/hoard/read.org"
  	      org-ref-default-bibliography  "~/proj/chenla/hoard/bib.bib"
	      org-ref-pdf-directory         "~/proj/chenla/hoard/lib")

    (setq org-ref-note-title-format "** %y - %t\n :PROPERTIES:\n  :Custom_ID: %k\n  :AUTHOR: %9a\n  :JOURNAL: %j\n  :YEAR: %y\n  :VOLUME: %v\n  :PAGES: %p\n  :DOI: %D\n  :URL: %U\n  :INTERLEAVE_PDF: %k.pdf\n:END:\n\n")

    ;; Tell org-ref to let helm-bibtex find notes for it
    ;;(setq org-ref-notes-function
    ;;   (lambda (thekey)
    ;;     (let ((bibtex-completion-bibliography (org-ref-find-bibliography)))
    ;;        (bibtex-completion-edit-notes
    ;;          (list (car (org-ref-get-bibtex-key-and-file thekey)))))))
 )
#+end_src

#+RESULTS:
:RESULTS:
t
:END:

** Interleave Mode
:PROPERTIES:
:ID:       9fc127a3-1d1f-4a51-a5e0-439090dd6aca
:END:

[[https://github.com/rudolfochrist/interleave][rudolfochrist/interleave: Emacs minor mode to interleave notes and text books]]

#+begin_src emacs-lisp

;; Interleave Mode ==========================================

;; Interleave org notes in pdf files

  (use-package interleave
    :ensure t
    :config
)
#+end_src

** SSH
:PROPERTIES:
:ID:       5cbae530-a69e-42aa-9f6d-112d248b957d
:END:

#+begin_src emacs-lisp

;; SSH =====================================================

;; may or may not help emacs not prompt for ssh key passphrases

(use-package exec-path-from-shell
  :ensure t
  :config
  (exec-path-from-shell-copy-env "SSH_AGENT_PID")
  (exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))

#+end_src

** Which Key
:PROPERTIES:
:ID:       8967b5c9-46f4-427d-a7f1-326ed2510c7a
:END:

which-key is a minor mode for Emacs that displays the key bindings
following your currently entered incomplete command (a prefix) in a
popup.

This cuts down on the need for a many hydras.  I love hydra but it's
better at creating little alternate universes to do specialized
things.

home: [[https://github.com/justbur/emacs-which-key][emacs-which-key]] | github
      [[http://irreal.org/blog/?p=5156][Which Key]] | Irreal

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config 
  (which-key-setup-side-window-right)
  (which-key-mode)
)
#+end_src

#+RESULTS:
: t

** Git Packages
:PROPERTIES:
:ID:       6011bfa4-2472-4513-aee8-513ef9f6fd20
:END:

 - [[http://www.wikemacs.org/wiki/Git#Colorize_Dired_output_depending_on_the_file_git_status][Git]] | WikEmacs


#+begin_src emacs-lisp
;; GIT Packages ============================================
#+end_src
*** Git Library
:PROPERTIES:
:ID:       9921e384-7daa-43a1-99a9-51911227d509
:END:

#+begin_src emacs-lisp
(use-package git
  :ensure t)
#+end_src

*** Magit
:PROPERTIES:
:ID:       4a87ed14-14d0-4c37-be54-42bc1003393a
:END:

Magit, along with Orgmode and Helm have transformed the way I use
Emacs more than perhaps any other.  But there is a learning curve --
but most of that learning curve is getting your head around Git and
how to /think/ in Git and make it part of nearly every moment of your
workflow. 

Magit actually makes learning and integrating Git into your life far
easier, even though I still only use a fraction of the power of what
Git and Magit can do.

Hmmmm. for someone who doesn't like learning tech skills from YouTube,
there sure are a lot of emacs videos of late.  The thing is, the
videos /aren't/ a good to learn new things.  But they are good at
showing what's possible and demonstrate workflow that is difficult to
do in a document.

Git is one of those subjects where videos can help visualize workflow
and useage patterns.  And if you think I'm rationalizing.... well,
that's my story and I'm sticking to it.

More info & Videos: 

  - [[https://www.youtube.com/watch?v=D1SJ6mFWYyA][Productive Emacs: Magit]] | YouTube

I'm starting to get the hang of simple rebasing, but squashing and
splitting are still beyond me.  These are good places to start:

  - [[https://www.youtube.com/watch?v=vQO7F2Q9DwA&feature=youtu.be][Magit Rebasing]] | YouTube
  - [[http://irreal.org/blog/?p=5514][Rewriting Git History with Rebase in Magit]] | Irreal

Merging diffs is the bane of my existence.  I'm still struggling to
effectively use both smerge and ediff in Magit.  These links are good
starting places:

  - [[http://irreal.org/blog/?p=5651][Merging with smerge]] | Irreal
  - [[https://coderwall.com/p/mcrwag/use-magit-ediff-to-resolve-merge-conflicts][Use magit-ediff to resolve merge conflicts]] | Coderwall
 

#+begin_src emacs-lisp
;;disable version control

(setq vc-handled-backends nil)


#+end_src


#+begin_src emacs-lisp

;; Magit ---------------------------------------------------

(use-package magit
  :ensure t
  :bind
  ("C-x g" . magit-status)
  ("C-x M-g" . magit-dispatch-popup))

(global-set-key (kbd "H-h") 'magit-log-buffer-file)

#+end_src

*** Git Gutter
:PROPERTIES:
:ID:       3ccf9ace-23b1-44f2-8005-e9255099ff32
:END:

Git gutter is a minor mode that indicates lines, in the left-side
/gutter/ of the window that have been added or deleted or changed
since the last comit in a Git repository.

After you've used this for a couple of days you start to wonder how
you ever lived without it.

:home: https://github.com/syohex/emacs-git-gutter

#+begin_src emacs-lisp

;; Git-Gutter ----------------------------------------------
;; :home: https://github.com/syohex/emacs-git-gutter
(use-package git-gutter
  :ensure t
  :config
  ;; use globally
  (global-git-gutter-mode +1)
  ;; add hook if you want to only use for specific modes
  (add-hook 'ruby-mode-hook 'git-gutter-mode)
  (add-hook 'python-mode-hook 'git-gutter-mode))

#+end_src

*** Magithub
:PROPERTIES:
:ID:       890a3c37-e10a-4f71-9d7d-7869da0054e7
:END:

Magithub allows you to create new repos in GitHub from within emacs.
I haven't really felt the need for this, though lately I'm been
creating a lot of new GitHub repos.  But I still have it commented out
until I feel the need.

#+begin_src emacs-lisp

;; Magithub ------------------------------------------------
;; SEE: http://jr0cket.co.uk/2017/02/spacemacs-using-magit-with-github.html
;;
;; requires installation of hub, see: https://hub.github.com/
;; which I'm not quite ready to do.

;; (use-package magithub
;;   :ensure t
;;   :after magit
;;   :config (magithub-feature-autoinject t))

#+end_src

*** nov.el
:PROPERTIES:
:ID:       c142f5b0-f087-4ff2-bd26-a7a36a0fd151
:END:

Emacs epub reader.

[[https://github.com/wasamasa/nov.el/blob/master/nov.el][wasamasa/nov.el]] | github
[[https://github.com/tali713/esxml/tree/css-select][tali713/esxml at css-select]] | github

#+begin_src emacs-lisp
;; nov.el --------------------------------------------------
;; epub reader
;; requires the esxml library with css-select checked out.

;;(add-to-list 'load-path "~/.emacs.d/esxml")
;;(require 'esxml)
;;(load "~/.emacs.d/nov/nov.el")
;;(setq nov-unzip-program "/usr/bin/unzip")
;;(push '("\\.epub\\'" . nov-mode) auto-mode-alist)


#+end_src






*** Git Time Machine
:PROPERTIES:
:ID:       2b6a7bbd-257f-4e99-b5b2-4cc6ca550cd2
:END:

 - [[https://github.com/pidu/git-timemachine][pidu/git-timemachine]] | GitHub


  - p :: Visit previous historic version
  - n :: Visit next historic version
  - w :: Copy the abbreviated hash of the current historic version
  - W :: Copy the full hash of the current historic version
  - g :: Goto nth revision
  - q :: Exit the time machine.

#+begin_src emacs-lisp

;; Git Timemachine -----------------------------------------

(use-package  git-timemachine
  :ensure t
)

#+end_src
*** Dired K
:PROPERTIES:
:ID:       6fb67724-ca2f-46db-bf52-ee28e88054ae
:END:

Highlights contents of git repository directories in dired like in [[https://github.com/supercrabtree/k][k]]
in z-shell.

After you get used to git-gutter this is the next logical step.  I
like it, but would like to see the option of having a view mode that
matched git-gutter.  But then again perhaps not.

I also like the human readable size colors which go from green to red,
indicating the file size.  And having timestamps that gradually fade
is very nice as well.

- [[https://github.com/syohex/emacs-dired-k][syohex/emacs-dired-k]] | GitHub


#+begin_src emacs-lisp
;; Dired K =================================================

(use-package dired-k
  :ensure t
  :config 
  (setq dired-k-human-readable t)
  (define-key dired-mode-map (kbd "K") 'dired-k)
  ;; You can use dired-k alternative to revert-buffer
  (define-key dired-mode-map (kbd "g") 'dired-k)

  ;; always execute dired-k when dired buffer is opened
  (add-hook 'dired-initial-position-hook 'dired-k)

  (add-hook 'dired-after-readin-hook #'dired-k-no-revert))
#+end_src


** Yas-snippet
:PROPERTIES:
:ID:       c3491a11-1d69-469c-8168-2efc01506b03
:END:


Clone AndreaCrotti's yasnippet collection:

   https://github.com/AndreaCrotti/yasnippet-snippets.git 

I put the directories under the ~/.dotfiles/emacs.d/ directory so that
snippets are kept in sync between boxes.  yasmate snippets end in an
underscore -- so in an org file, dot_ and then <TAB> will insert the
snippets.  Install all custom snippets into the snippets directory
when you hit C-c C-c when you create a new snippet and then run M-x
yas-reload-all.  M-x yasnippet-describe-tables will show available
snippets for the mode you are in.

#+begin_src emacs-lisp
  ;; YASNIPPET ================================================

  (use-package yasnippet
    :ensure t
    :config
      (setq yas-snippet-dirs
        '("~/.emacs.d/yasmate/"
          "~/.emacs.d/snippets/"))
    (setq warning-suppress-types '(yasnippet backquote-change))
    ;;(add-to-list 'warning-suppress-types '(yasnippet backquote-change))
    ;;(define-key yas-minor-mode-map (kbd "<tab>") 'yas-expand)
    ;;(define-key yas-minor-mode-map (kbd "TAB") 'yas-expand)
    )

    (yas-global-mode 1)
    (yas-reload-all)
#+end_src

** Programing Languages
:PROPERTIES:
:ID:       92290dfc-e3d7-4257-80a3-6d4077c0cfe2
:END:

#+begin_src emacs-lisp

;; Programing Languages ====================================
;; Except Lisp, which has it's own file.

#+end_src

*** PHP
:PROPERTIES:
:ID:       078ea8f9-1c7e-40a6-8c74-1ba1e3711626
:END:


#+begin_src emacs-lisp

;; PHP =====================================================

(use-package php-mode
  :ensure t
  )

#+end_src

*** Ruby
:PROPERTIES:
:ID:       02d16922-25b2-4e32-9e9a-55b34f3f7e96
:END:

#+begin_src emacs-lisp

;; Ruby ====================================================

(use-package ruby-mode
  :ensure t
  :mode "\\.rb\\'"
  :interpreter "ruby")

#+end_src

*** Python

#+begin_example

;; Python ==================================================

(use-package python-mode
  :ensure t)

#+end_example

** Dictionaries
:PROPERTIES:
:ID:       860f4841-9e8c-425d-83f9-7750ed841486
:END:

#+begin_src emacs-lisp

;; Dictionaries and Word Definitions ==========================

;; Dictionary -------------------------------------------------
;; looks up definition online in word-nik
;; (use-package define-word
;;   :ensure t
;;   )
 (use-package dictionary
   :ensure t
   :config
   (global-set-key (kbd "H-w") 'dictionary-search)
   )
#+end_src

- [[http://jsomers.net/blog/dictionary][You’re probably using the wrong dictionary « the jsomers.net blog]]
- [[http://mbork.pl/2017-01-14_I'm_now_using_the_right_dictionary][Marcin Borkowski: 2017-01-14 I'm now using the right dictionary]]
- [[https://github.com/gucong/emacs-sdcv][gucong/emacs-sdcv: forked version of sdcv.el or sdcv-mode.el]]
- [[http://simonwiles.net/projects/cc-cedict/][cc-cedict]] | simonwiles.net
- [[http://kdr2.com/resource/stardict.html][Resources for Stardict]]

#+begin_src emacs-lisp
;; emacs scvd-mode ----------------------------------------------
;;  major mode to view output of dictionary search of sdcv
;;  requires sdcv and dictionaries in ~/.stardict/dic

(load "~/.emacs.d/emacs-sdcv/sdcv-mode.el")
(global-set-key (kbd "H-d") 'sdcv-search)
#+end_src


** Boxquote
:PROPERTIES:
:ID:       6a9ca78e-3879-465b-96a6-cdb067cb79ca
:END:

#+begin_src emacs-lisp

;; Boxquote =================================================

(use-package boxquote
  :ensure t )

#+end_src

** Lorem ipsum
:PROPERTIES:
:ID:       50e2115d-d2b2-46c7-8191-3715886d2986
:END:

#+begin_src emacs-lisp

;; Lorem ipsum ==============================================

(use-package lorem-ipsum
  :ensure t)

#+end_src

** Twittering Mode
:PROPERTIES:
:ID:       bd10c1e8-6965-4e68-b941-e028e4a60951
:END:

#+begin_src emacs-lisp

;; Twittering ===============================================

  (use-package twittering-mode
  :ensure t
  :config
  (setq twittering-use-master-password t)
  (setq twittering-icon-mode t)         ; Show icons
  (setq twittering-timer-interval 300)  ; Update timeline each 300 seconds
  (setq twittering-url-show-status nil) ; Keeps the echo area from
 				        ; showing all the http processes
  )

#+end_src

** Elfeed
:PROPERTIES:
:ID:       e5f0ea27-102d-463c-9175-2a15b23b3ec2
:END:


 - [[https://github.com/skeeto/elfeed][skeeto/elfeed]]  | Github
 - [[https://github.com/algernon/elfeed-goodies][elfeed-goodies]] | Github
 - [[https://github.com/remyhonig/elfeed-org][elfeed-org]]     | Github
 - [[http://cestlaz.github.io/posts/using-emacs-29%20elfeed/#.WK-eQLMxVph][Using Emacs #29 -elfeed part 1]] | C'est la Z

 - [[http://nullprogram.com/blog/2013/11/26/][Elfeed Tips and Tricks]] | null program

The code for grabbing org-mode links from elfeed entries:

 - [[http://heikkil.github.io/blog/2015/05/09/notes-from-elfeed-entries/][Note taking 3: Notes from elfeed entries - Heikki @ home]]

Use the code in the following Gist /inside/ use-package or
it won't work.

 - [[https://gist.github.com/heikkil/1feaf53133b56e5c51e1][Elfeed functions and bindings to copy and link to web pages]]


#+begin_src emacs-lisp

  ;; elfeed =================================================

  (setq elfeed-db-directory "~/.elfeed")

  (use-package elfeed
    :ensure t
    :init
    (setq-default elfeed-search-filter "@1-month-ago +unread")
    :bind (:map elfeed-search-mode-map
		("q" . bjm/elfeed-save-db-and-bury)
		("Q" . bjm/elfeed-save-db-and-bury)
		("j" . hydra-elfeed/body)
		("J" . hydra-elfeed/body))
     :config
       (elfeed-org)

       (defun elfeed-link-title (entry)
         "Copy the entry title and URL as org link to the clipboard."
         (interactive)
         (let* ((link (elfeed-entry-link entry))
                (title (elfeed-entry-title entry))
                (titlelink (concat "[[" link "][" title "]]")))
           (when titlelink
             (kill-new titlelink)
             (x-set-selection 'PRIMARY titlelink)
             (message "Yanked: %s" titlelink))))

       ;; show mode

       (defun elfeed-show-link-title ()
         "Copy the current entry title and URL as org link to the clipboard."
         (interactive)
         (elfeed-link-title elfeed-show-entry))

       (defun elfeed-show-quick-url-note ()
         "Fastest way to capture entry link to org agenda from elfeed show mode"
         (interactive)
         (elfeed-link-title elfeed-show-entry)
         (org-capture nil "n")
         (yank)
         (org-capture-finalize))

       (bind-keys :map elfeed-show-mode-map
                  ("l" . elfeed-show-link-title)
                  ("v" . elfeed-show-quick-url-note))

       ;; search mode

       (defun elfeed-search-link-title ()
         "Copy the current entry title and URL as org link to the clipboard."
         (interactive)
         (let ((entries (elfeed-search-selected)))
           (cl-loop for entry in entries
                    when (elfeed-entry-link entry)
                    do (elfeed-link-title entry))))

       (defun elfeed-search-quick-url-note ()
         "In search mode, capture the title and link for the selected
     entry or entries in org aganda."
         (interactive)
         (let ((entries (elfeed-search-selected)))
           (cl-loop for entry in entries
                    do (elfeed-untag entry 'unread)
                    when (elfeed-entry-link entry)
                    do (elfeed-link-title entry)
                    do (org-capture nil "n")
                    do (yank)
                    do (org-capture-finalize)
                    (mapc #'elfeed-search-update-entry entries))
           (unless (use-region-p) (forward-line))))

       (bind-keys :map elfeed-search-mode-map
                  ("l" . elfeed-search-link-title)
                  ("v" . elfeed-search-quick-url-note)))

		;;("m" . elfeed-toggle-star)
		;;("M" . elfeed-toggle-star)


  (defun elfeed-mark-all-as-read ()
	(interactive)
	(mark-whole-buffer)
	(elfeed-search-untag-all-unread))

  ;;functions to support syncing .elfeed between machines
  ;;makes sure elfeed reads index from disk before launching
  (defun bjm/elfeed-load-db-and-open ()
    "Wrapper to load the elfeed db from disk before opening"
    (interactive)
    (elfeed-db-load)
    (elfeed)
    (elfeed-search-update--force))

  ;;write to disk when quiting
  (defun bjm/elfeed-save-db-and-bury ()
    "Wrapper to save the elfeed db to disk before burying buffer"
    (interactive)
    (elfeed-db-save)
    (quit-window))

  ;; (defalias 'elfeed-toggle-star
  ;;   (elfeed-expose #'elfeed-search-toggle-all 'star))


  ;; elfeed goodies ======================================

  (use-package elfeed-goodies
    :ensure t
    :init
    (setq elfeed-goodies/entry-pane-position (quote bottom))
    :config
    (elfeed-goodies/setup))

  ;; elfeed-org ==========================================

  (use-package elfeed-org
    :ensure t
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/org/elfeed.org")))

#+end_src

#+RESULTS:
:RESULTS:
t
:END:

** Color Themes
:PROPERTIES:
:ID:       2a89acfd-b99c-4b1d-a786-4e168fbb61c6
:END:

Do I really need this anymore?  If I do this should be moved up with
the Gruvbox section.

#+begin_src emacs-lisp

;; Color Themes ============================================

;; to choose a theme interactively -- M-x color-theme-select
(use-package color-theme
  :ensure t
  )

#+end_src

** WebDev Packages
:PROPERTIES:
:ID:       6396b25d-76b6-471a-99e7-e8eb7f4b554e
:END:

#+begin_src emacs-lisp

;; WebDev ==================================================

#+end_src

*** nXML Mode

nXML Mode should be now part of emacs -- mXML is still best for
working with XML, but Web-Mode is better for WebDev.

*** HTML Tidy
:PROPERTIES:
:ID:       0d6e470d-f893-44ac-8003-ea9769548378
:END:

#+begin_src emacs-lisp

;; HTML Tidy -----------------------------------------------

(use-package tidy
  :ensure t
  )

#+end_src

*** RelaxNG
:PROPERTIES:
:ID:       d8cad95d-09d4-4896-922f-721ec56b82ab
:END:


#+begin_src emacs-lisp

;; RelaxNG Mode --------------------------------------------

(use-package rnc-mode
  :ensure t
  )

#+end_src

*** Htmlize
:PROPERTIES:
:ID:       70a4aef6-0b21-4e0c-8815-c6e06d0cf602
:END:

#+begin_src emacs-lisp

;; Htmlize -------------------------------------------------

(use-package htmlize
  :ensure t
  )

#+end_src


*** Web Mode
:PROPERTIES:
:ID:       1ac72321-5d51-4309-bd57-826b2e3c41fc
:END:

#+begin_src emacs-lisp
;; Web-Mode ------------------------------------------------
;;
;; Replacement for html mode.
;;
;; See:
;; :url: http://web-mode.org/ ;; home page
;; :url: http://cestlaz.github.io/posts/using-emacs-21-web-mode/#.WC0t1LMxVhF
(use-package web-mode
    :ensure t
    :config
	 (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
	 (setq web-mode-engines-alist
	       '(("django"    . "\\.html\\'"))) ;; use for liquid (jekyll)
	 (setq web-mode-ac-sources-alist
	       '(("css" . (ac-source-css-property))
		 ("html" . (ac-source-words-in-buffer ac-source-abbrev))))

(setq web-mode-enable-auto-closing t)
(setq web-mode-enable-auto-quoting t))

#+end_src


*** Rainbow Mode
:PROPERTIES:
:ID:       421a3bd7-7152-4873-8eff-4c65789bd899
:END:

Once you start using it, you wonder how you every worked with CSS
without it....

#+begin_src emacs-lisp

;; Rainbow mode --------------------------------------------

(use-package rainbow-mode
  :ensure t
  :config
   (autoload 'rainbow-mode "rainbow" nil t nil)
   (add-hook 'css-mode-hook
	     (lambda ()
	       (rainbow-mode 1)))
  )

#+end_src

*** CSS Mode
:PROPERTIES:
:ID:       9630e8ab-fc9a-492a-b930-c75cd77e03ac
:END:


#+begin_src emacs-lisp

;; CSS Mode ------------------------------------------------

(use-package css-mode
  :ensure t
  :init
  (defalias 'apropos-macrop 'macrop)
  (autoload 'css-mode "css-mode")
  (setq auto-mode-alist       
    (cons '("\\.css\\'" . css-mode) auto-mode-alist))
  )

#+end_src

** CSV Mode
:PROPERTIES:
:ID:       34ac5645-4d97-49b0-bb54-361598c10163
:END:

#+begin_src emacs-lisp

;; CSV Mode ================================================

(use-package csv-mode
  :ensure t
  )

#+end_src

** Findr
:PROPERTIES:
:ID:       d313604c-cc4e-4a90-9b70-f6b7ecaeb3c7
:END:

Do we need this?  Using Helm as find interface

#+begin_src emacs-lisp

;; findr ===================================================

(use-package findr
  :ensure t
  )

#+end_src


** WWTime
:PROPERTIES:
:ID:       1e2102a5-035f-4be1-8b12-603c1abdb5e7
:END:

#+begin_src emacs-lisp

;; wwtime ==================================================
(use-package wwtime
  :ensure t
  )

#+end_src

** JSON 
:PROPERTIES:
:ID:       e5d3713c-7035-495f-a4bd-dcc3cb3337f9
:END:

Move up with WebDev?

#+begin_src emacs-lisp

;; JSON ====================================================

(use-package json
  :ensure t
  )


#+end_src

** Chef & Cucumber
:PROPERTIES:
:ID:       e409f8b0-67dd-4763-9cb5-dc0450b21e0d
:END:
#+begin_src emacs-lisp

;; Chef & Cucumber =========================================

#+end_src

*** Chef
:PROPERTIES:
:ID:       c0d6aa36-e511-4853-83cc-7e92bb076548
:END:

#+begin_src emacs-lisp

;; Chef ----------------------------------------------------

(use-package chef-mode
  :ensure t
  )

#+end_src

*** Cucumber
:PROPERTIES:
:ID:       2f7344fd-30e9-43a4-ac87-741a31f102ed
:END:
#+begin_src emacs-lisp

;; Cucumber ------------------------------------------------

;; (edit .feature files)
(use-package feature-mode
  :ensure t)

#+end_src

** Emacs Lisp Development
:PROPERTIES:
:ID:       6c8540de-961e-4f7d-a405-8e4dd26afb51
:END:
#+begin_src emacs-lisp

;; Emacs Lisp Development ==================================

#+end_src

*** Cask
:PROPERTIES:
:ID:       036f1a51-e090-4b36-b7d6-781d96fb76f8
:END:
#+begin_src emacs-lisp

;; Cask ----------------------------------------------------

;; (project package management for elisp)
(use-package cask
  :ensure t
  )

#+end_src


*** Ecukes
:PROPERTIES:
:ID:       322582dd-44e7-4572-a893-e631d6dabac8
:END:

#+begin_src emacs-lisp

;; Ecukes --------------------------------------------------

;; (cucumber like tests for elisp)
(use-package ecukes
  :ensure t
  )

#+end_src

** Expand-Region
:PROPERTIES:
:ID:       7e4154ff-fffc-4c7d-9389-a711bfb1a656
:END:

As Mike Zamansky promised, it's really easy to fall in love with this
package.  People outside of emacs don't need to mark regions for
anything accept cut and paste.  In Emacs that's just a common
use-case.

By default it is bound to C-=.

  - [[https://github.com/magnars/expand-region.el][Expand-Region.el]] | GitHub
  - [[http://cestlaz.github.io/posts/using-emacs-17-misc/#.WKhJdbMxVhE][Using Emacs 17 - misc small packages]] | C'est la Z

#+begin_src emacs-lisp

;; Expand Region ===========================================
;; expand the marked region in semantic increments 
;; (negative prefix to reduce region)
;; Bound to C-= by default

(use-package expand-region
:ensure t
:config 
(global-set-key (kbd "C-=") 'er/expand-region))

#+end_src

#+RESULTS:
:RESULTS:
t
:END:

** Hungry Delete
:PROPERTIES:
:ID:       62eba4cb-90e6-496c-bc71-0fba89a69ffe
:END:

I had tried hungry delete a few years ago, or it might have been
something else that did the same thing and didn't like.  I think it
/was/ just a function that I found on EmacsWiki back in the day.

The /package/ Hungry Delete adds a lot of smarts to concept, and
mostly does what you intend to do.  But it does have a little learning
curve.  If you have say four blank lines and you want to delete all
but one, hungry delete will eat all four and you'll have to add in the
extra line again.  That still saves three keystrokes.

I'll try it out for a while and see if it's a keeper or not.

  - [[https://github.com/nflath/hungry-delete][hungry-delete]] | GitHub
  - [[http://cestlaz.github.io/posts/using-emacs-17-misc/#.WKhJdbMxVhE][Using Emacs 17 - misc small packages]] | C'est la Z

#+begin_src emacs-lisp

;; Hungry Delete ===========================================
;; deletes all the whitespace when you hit backspace or delete
(use-package hungry-delete
:ensure t
:config
(global-hungry-delete-mode))

#+end_src

#+RESULTS:
:RESULTS:
t
:END:

** iEdit
:PROPERTIES:
:ID:       8aa2c5a4-fc66-4f71-9b95-d94a0c83c743
:END:

iEdit allows you to edit all instances of a marked region in a buffer.

I've tried multiple cursors, but it is too finicky for my tastes, as
Mike Zamansky said, /iedit combined with narrow region works very
well.

However, I don't use the function from Endless Parenthesis, I had used
it a few years ago -- but now that I'm using which-key, the whole
narrowing keymap pops up using C-x n.

In Org mode, I've set up to use speed keys to narrow-widen, which I
use all the time.  So, taken together, I am happy with the setup and
all I have to remember is C-x n n/w to narrow, highlight the text to
edit and then C-; and you're good to go.

 - [[https://github.com/victorhge/iedit][iedit]] | GitHub
 - [[http://cestlaz.github.io/posts/using-emacs-18-narrow/#.WKlrKLMxVph][Using Emacs - 18 - Narrowing and iedit]] | C'est la Z
 - [[http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html][Emacs narrow-or-widen-dwim]] | Endless Parentheses

#+begin_src emacs-lisp

;; iEdit ===================================================
;; edit all instances of a marked region in a buffer
;; bound to C-;
(use-package iedit
  :ensure t)
#+end_src

#+RESULTS:
:RESULTS:
nil
:END:

** Beacon Mode
:PROPERTIES:
:ID:       0ad19450-0bcd-4414-82b8-c1a3ad90daf1
:END:

Another tip from Mike Zamansky.  I had my doubts by it really is
pretty cool and does help you keep track of the curser when you
scroll (when you scroll -- not when you move the cursor which would be
annoying).

  - [[https://github.com/Malabarba/beacon][beacon]] | GitHub
  - [[http://cestlaz.github.io/posts/using-emacs-17-misc/#.WKhJdbMxVhE][Using Emacs 17 - misc small packages]] | C'est la Z

#+begin_src emacs-lisp

;; Beacon Mode =============================================
;; flashes the cursor's line when you scroll

(use-package beacon
:ensure t
:config
(beacon-mode 1)
; this color looks good for the zenburn theme but not for the one
; I'm using for the videos
(setq beacon-color "#666600")
)
#+end_src

#+RESULTS:
:RESULTS:
t
:END:
** Nyan Mode

Okay, this was stupid, installed it because I was bored, and yes it
shows the famous pop-tart cat in your mode-line.  It's really not
worth it.  But someone at work thought that nyan-cat was an emacs
thing and I thought, no.  But I wouldn't be surprised it if was.

Can't work out how to kill it.  Well, it won't be loaded when I
reboot, so there is that....

NOT tangled.

#+begin_src emacs-lisp :tangle no
(use-package  nyan-mode
 :ensure 
 :config
(nyan-mode 1))
#+end_src

#+RESULTS:
:RESULTS:
t
:END:
** Calfw 
:PROPERTIES:
:ID:       81974f2e-c2f0-474d-ba39-c52c9530f768
:END:

There is a package available for GCal integration as well.

  - [[https://github.com/kiwanami/emacs-calfw][kiwanami/emacs-calfw]] | GitHub
  - [[http://jameswilliams.be/blog/2016/01/11/Taming-Your-GCal.html][Taming Google Calendar With Org-Mode]]

This has been a 


#+begin_src emacs-lisp

  ;; Calfw ===================================================

  (use-package calfw
    :ensure t 
    :config
     ;(require 'calfw-org)
     (setq cfw:org-overwrite-default-keybinding t)
     ;;(setq cfw:org-agenda-schedule-args '(:timestamp))

     (define-key global-map "\C-cq" 'cfw:open-org-calendar)
  )


     (setq calendar-day-name-array
	["日" "月" "火" "水" "木" "金" "土"])

     ;; Default setting
     (setq cfw:fchar-junction ?+
	cfw:fchar-vertical-line ?|
	cfw:fchar-horizontal-line ?-
	cfw:fchar-left-junction ?+
	cfw:fchar-right-junction ?+
	cfw:fchar-top-junction ?+
	cfw:fchar-top-left-corner ?+
	cfw:fchar-top-right-corner ?+ )

     ;; Unicode characters
     ;; (setq cfw:fchar-junction ?╋
     ;;       cfw:fchar-vertical-line ?┃
     ;;       cfw:fchar-horizontal-line ?━
     ;;       cfw:fchar-left-junction ?┣
     ;;       cfw:fchar-right-junction ?┫
     ;;       cfw:fchar-top-junction ?┯
     ;;       cfw:fchar-top-left-corner ?┏
     ;;       cfw:fchar-top-right-corner ?┓)

  (custom-set-faces
   '(cfw:face-title ((t (:foreground "darkgoldenrod3" :weight bold :height 2.0 :inherit variable-pitch))))
   '(cfw:face-header ((t (:foreground "maroon2" :weight bold))))
   '(cfw:face-sunday ((t :foreground "red" :weight bold)))
   '(cfw:face-saturday ((t :foreground "blue" :weight bold)))
   '(cfw:face-holiday ((t :background "grey10" :foreground "purple" :weight bold)))
   '(cfw:face-default-content ((t :foreground "green2" )))
   '(cfw:face-regions ((t :foreground "cyan")))
   '(cfw:face-day-title ((t :background "grey10")))
   '(cfw:face-today-title ((t :background "red4" :weight bold)))
   '(cfw:face-today ((t :foreground: "cyan" :weight bold)))
   '(cfw:face-select ((t :background "blue4")))
   '(cfw:face-toolbar-button-off ((t :foreground "cyan" :weight bold)))
   '(cfw:face-toolbar-button-on ((t :foreground "Gray50" :weight bold)))
  ;;  '(cfw:face-grid ((t :foreground "DarkGrey")))
  ;;  '(cfw:face-default-day ((t :weight bold :inherit cfw:face-day-title)))
  ;;  '(cfw:face-annotation ((t :foreground "RosyBrown" :inherit cfw:face-day-title)))
   )

#+end_src

#+RESULTS:
:RESULTS:
nil
:END:


** Chronos
:PROPERTIES:
:ID:       8a41f27c-7a39-4f00-a90e-22d87ddb85b8
:END:

 - [[https://github.com/dxknight/chronos][dxknight/chronos: Chronos]] | Github

#+begin_src emacs-lisp

;; Chronos =================================================
 (use-package chronos 
   :ensure t
   :init
 (setq chronos-expiry-functions '(chronos-buffer-notify
                                  chronos-dunstify))
)

#+end_src

#+RESULTS:
:RESULTS:
nil
:END:

** Helm-chronos
:PROPERTIES:
:ID:       6dcaa0f2-dbbc-43b1-9e89-964402cb3d44
:END:

 - [[https://github.com/dxknight/helm-chronos][dxknight/helm-chronos]] | GitHub

#+begin_src emacs-lisp

;; Helm Chronos ============================================
 (use-package helm-chronos
   :ensure t
   :init
 (setq helm-chronos-standard-timers
   '( "   1/You Win!"
      "   2/Drink Beer!"
      "   4/Soak noodles"
      "  25/Pomodoro: Work on helm-chronos + 5/Pomodoro: Rest"))
)

#+end_src

#+RESULTS:
:RESULTS:
nil
:END:
** Eyebrowse
:PROPERTIES:
:ID:       9f519c6d-501f-40f1-8a39-fd899a498dd1
:END:

Workspaces creation and switching.

 - [[https://github.com/wasamasa/eyebrowse][wasamasa/eyebrowse: A simple-minded way of managing window configs in emacs]]
 - [[http://pragmaticemacs.com/emacs/easily-manage-emacs-workspaces-with-eyebrowse/][Pragmatic Emacs: Easily manage Emacs workspaces with eyebrowse]]

#+begin_src emacs-lisp
;;; Eyebrowse window manager -------------------------------
(use-package eyebrowse
  :ensure t
  :diminish eyebrowse-mode
  :config 
  (progn
    (define-key eyebrowse-mode-map (kbd "H-1") 'eyebrowse-switch-to-window-config-1)
    (define-key eyebrowse-mode-map (kbd "H-2") 'eyebrowse-switch-to-window-config-2)
    (define-key eyebrowse-mode-map (kbd "H-3") 'eyebrowse-switch-to-window-config-3)
    (define-key eyebrowse-mode-map (kbd "H-4") 'eyebrowse-switch-to-window-config-4)
    (define-key eyebrowse-mode-map (kbd "H-5") 'eyebrowse-switch-to-window-config-5)
    (define-key eyebrowse-mode-map (kbd "H-6") 'eyebrowse-switch-to-window-config-6)
    (define-key eyebrowse-mode-map (kbd "H-<right>") 'eyebrowse-next-window-config)
    (define-key eyebrowse-mode-map (kbd "H-<left>") 'eyebrowse-prev-window-config)
    (setq eyebrowse-new-workspace t))
    (eyebrowse-mode t))

#+end_src

** Rainbow Delimiters
:PROPERTIES:
:ID:       0e2ce13f-5790-4be6-80f7-3ea7ec20e16b
:END:

 - [[https://github.com/Fanael/rainbow-delimiters][Emacs rainbow delimiters mode]] | github

#+begin_src emacs-lisp
;;; Rainbow Delimeters ------------------------------------

(use-package rainbow-delimiters
 :ensure t
 :config )
#+end_src


** AucTex
:PROPERTIES:
:ID:       9e513801-6e65-428f-9214-a41d75755256
:END:

- [[http://nasseralkmim.github.io/notes/2016/08/21/my-latex-environment/][My LaTeX environment]] | Nasser Alkmim

#+begin_src emacs-lisp
;;; AucTex -------------------------------------------------

(use-package tex-site
  :ensure auctex
  :mode ("\\.tex\\'" . latex-mode)
  :config
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (rainbow-delimiters-mode)
              (smartparens-mode)
              (turn-on-reftex)
              (setq reftex-plug-into-AUCTeX t)
              (reftex-isearch-minor-mode)
              (setq TeX-PDF-mode t)
              (setq TeX-source-correlate-method 'synctex)
              (setq TeX-source-correlate-start-server t)))

;; Update PDF buffers after successful LaTeX runs
(add-hook 'TeX-after-TeX-LaTeX-command-finished-hook
           #'TeX-revert-document-buffer)

;; to use pdfview with auctex
(add-hook 'LaTeX-mode-hook 'pdf-tools-install)

;; to use pdfview with auctex
(setq TeX-view-program-selection '((output-pdf "pdf-tools"))
       TeX-source-correlate-start-server t)
(setq TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view"))))

#+end_src


** PDF Tools
:PROPERTIES:
:ID:       7e35193d-c615-454c-9c00-45f1c91deeec
:END:

PDFTools turns emacs into the best PDF viewer for doing
research. 

  - [[https://github.com/politza/pdf-tools][politza/pdf-tools: Emacs support library for PDF
    files.]] | GitHub
  - [[http://pragmaticemacs.com/emacs/view-and-annotate-pdfs-in-emacs-with-pdf-tools/][View and annotate PDFs in Emacs with PDF-tools]] | Pragmatic Emacs
  - [[http://pragmaticemacs.com/emacs/more-pdf-tools-tweaks/?utm_content=buffer61399&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer][More PDF-tools tweaks]] | Pragmatic Emacs
  - [[http://babbagefiles.blogspot.com/2017/11/more-pdf-tools-tricks.html][The Babbage Files: More pdf-tools tricks]]
  - [[http://mbork.pl/2017-10-30_Pdf-tools_and_follow_mode][2017-10-30 Pdf-tools and follow mode]] | Marcin Borkowski

More tweeks for annotation, but annotation crashes on my box
so will implement later.

  - [[http://pragmaticemacs.com/emacs/even-more-pdf-tools-tweaks/][Pragmatic Emacs: Even more PDF-tools tweaks]] | 


First install libpoppler

#+begin_src sh :tangle no
sudo aptitude install libpng-dev zlib1g-dev
sudo aptitude install libpoppler-glib-dev
sudo aptitude install libpoppler-private-dev
#+end_src



#+begin_src emacs-lisp
(use-package pdf-tools
 :pin manual ;; manually update
 :config
 ;; open pdfs scaled to fit page
 (setq-default pdf-view-display-size 'fit-page)
 ;; automatically annotate highlights
 (setq pdf-annot-activate-created-annotations t)
 ;; use normal isearch
 (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
 ;; turn off cua so copy works
 (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
 ;; more fine-grained zooming
 (setq pdf-view-resize-factor 1.1)
 ;; keyboard shortcuts
 (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
 (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
 (define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete)

(pdf-tools-install)



;; midnite mode hook
 (add-hook 'pdf-view-mode-hook (lambda ()
                                 (pdf-view-midnight-minor-mode))) ; automatically turns on midnight-mode for pdfs

(setq pdf-view-midnight-colors '("#ff9900" . "#0a0a12" )) ; set the amber profile as default (see below)

(defun bms/pdf-no-filter ()
  "View pdf without colour filter."
  (interactive)
  (pdf-view-midnight-minor-mode -1)
  )

;; change midnite mode colours functions
(defun bms/pdf-midnite-original ()
  "Set pdf-view-midnight-colors to original colours."
  (interactive)
  (setq pdf-view-midnight-colors '("#839496" . "#002b36" )) ; original values
  (pdf-view-midnight-minor-mode)
  )

(defun bms/pdf-midnite-amber ()
  "Set pdf-view-midnight-colors to amber on dark slate blue."
  (interactive)
  (setq pdf-view-midnight-colors '("#ff9900" . "#0a0a12" )) ; amber
  (pdf-view-midnight-minor-mode)
  )

(defun bms/pdf-midnite-green ()
  "Set pdf-view-midnight-colors to green on black."
  (interactive)
  (setq pdf-view-midnight-colors '("#00B800" . "#000000" )) ; green 
  (pdf-view-midnight-minor-mode)
  )

(defun bms/pdf-midnite-colour-schemes ()
  "Midnight mode colour schemes bound to keys"
        (local-set-key (kbd "!") (quote bms/pdf-no-filter))
        (local-set-key (kbd "@") (quote bms/pdf-midnite-amber)) 
        (local-set-key (kbd "#") (quote bms/pdf-midnite-green))
            (local-set-key (kbd "$") (quote bms/pdf-midnite-original))
 )  

(add-hook 'pdf-view-mode-hook 'bms/pdf-midnite-colour-schemes)

)
#+end_src

** TLDR
:PROPERTIES:
:ID:       68cc0ecf-52c8-4cb5-bcd9-887d55f0d213
:END:

Emacs TLDR interface for TLDR documentation.

For some reason M-x tldr doesn't work for me, but M-x
helm-tldr does.  That's find by me, because I use nearly
everything through helm.

#+begin_src emacs-lisp
(use-package tldr
 :ensure t
 :config ) 
#+end_src

** Pandoc Mode
:PROPERTIES:
:ID:       95c6ee6e-7ceb-4633-9f5e-31e6eb5653c1
:END:

 - https://joostkremers.github.io/pandoc-mode/

M-x pandoc-mode then C-c/ to bring up the hydra menu.q

#+begin_src emacs-lisp
(use-package pandoc-mode
 :ensure t
 :config ) 
#+end_src
